openapi: 3.0.0
info:
  title: 'swagger easycrud-ci4'
  description: 'This is a sample server easycrud-ci4'
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  -
    url: /api
    description: 'OpenApi host'
paths:
  /accountBalances:
    get:
      tags:
        - AccountBalance
      summary: 'Find list AccountBalance'
      description: 'Returns list of AccountBalance'
      operationId: getAccountBalance
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/AccountBalance' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/AccountBalance' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/AccountBalance' } }
                type: object
        '404':
          description: 'AccountBalance not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - AccountBalance
      summary: 'Add a new AccountBalance to the store'
      operationId: addAccountBalance
      requestBody:
        $ref: '#/components/requestBodies/AccountBalance'
      responses:
        '201':
          description: 'Created AccountBalance'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalance'
            application/xml:
              schema:
                $ref: '#/components/schemas/AccountBalance'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/accountBalances/{id}':
    get:
      tags:
        - AccountBalance
      summary: 'Find AccountBalance by ID'
      description: 'Returns a single AccountBalance'
      operationId: getAccountBalanceById
      parameters:
        -
          name: id
          in: path
          description: 'ID of AccountBalance to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalance'
            application/xml:
              schema:
                $ref: '#/components/schemas/AccountBalance'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'AccountBalance not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - AccountBalance
      summary: 'Update an existing AccountBalance'
      operationId: updateAccountBalance
      parameters:
        -
          name: id
          in: path
          description: 'AccountBalance id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/AccountBalance'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'AccountBalance not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - AccountBalance
      summary: 'Deletes a AccountBalance'
      operationId: deleteAccountBalance
      parameters:
        -
          name: id
          in: path
          description: 'AccountBalance id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /auth/login:
    post:
      tags:
        - Authentication
      summary: 'login page to authenticate user'
      operationId: userLogin
      requestBody:
        description: 'Login user'
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              type: object
      responses:
        '200':
          description: 'Login successed'
          content:
            application/json:
              schema: {  }
            application/xml:
              schema: {  }
        '400':
          description: 'Invalid email/password supplied'
  /auth/register:
    post:
      tags:
        - Authentication
      summary: 'register page to new user'
      operationId: userRegister
      requestBody:
        description: 'Login user'
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                pass_confirm:
                  type: string
              type: object
      responses:
        '200':
          description: 'Login successed'
          content:
            application/json:
              schema: {  }
            application/xml:
              schema: {  }
        '400':
          description: 'Invalid username/password supplied'
  /babs:
    get:
      tags:
        - Bab
      summary: 'Find list Bab'
      description: 'Returns list of Bab'
      operationId: getBab
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bab' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bab' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Bab' } }
                type: object
        '404':
          description: 'Bab not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Bab
      summary: 'Add a new Bab to the store'
      operationId: addBab
      requestBody:
        $ref: '#/components/requestBodies/Bab'
      responses:
        '201':
          description: 'Created Bab'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bab'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bab'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/babs/{id}':
    get:
      tags:
        - Bab
      summary: 'Find Bab by ID'
      description: 'Returns a single Bab'
      operationId: getBabById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Bab to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bab'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bab'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Bab not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Bab
      summary: 'Update an existing Bab'
      operationId: updateBab
      parameters:
        -
          name: id
          in: path
          description: 'Bab id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Bab'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Bab not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Bab
      summary: 'Deletes a Bab'
      operationId: deleteBab
      parameters:
        -
          name: id
          in: path
          description: 'Bab id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /balances:
    get:
      tags:
        - Balance
      summary: 'Find list Balance'
      description: 'Returns list of Balance'
      operationId: getBalance
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Balance' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Balance' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Balance' } }
                type: object
        '404':
          description: 'Balance not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Balance
      summary: 'Add a new Balance to the store'
      operationId: addBalance
      requestBody:
        $ref: '#/components/requestBodies/Balance'
      responses:
        '201':
          description: 'Created Balance'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
            application/xml:
              schema:
                $ref: '#/components/schemas/Balance'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/balances/{id}':
    get:
      tags:
        - Balance
      summary: 'Find Balance by ID'
      description: 'Returns a single Balance'
      operationId: getBalanceById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Balance to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
            application/xml:
              schema:
                $ref: '#/components/schemas/Balance'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Balance not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Balance
      summary: 'Update an existing Balance'
      operationId: updateBalance
      parameters:
        -
          name: id
          in: path
          description: 'Balance id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Balance'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Balance not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Balance
      summary: 'Deletes a Balance'
      operationId: deleteBalance
      parameters:
        -
          name: id
          in: path
          description: 'Balance id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /bmdonationcampaigncategories:
    get:
      tags:
        - Bmdonationcampaigncategory
      summary: 'Find list Bmdonationcampaigncategory'
      description: 'Returns list of Bmdonationcampaigncategory'
      operationId: getBmdonationcampaigncategory
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bmdonationcampaigncategory' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bmdonationcampaigncategory' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Bmdonationcampaigncategory' } }
                type: object
        '404':
          description: 'Bmdonationcampaigncategory not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Bmdonationcampaigncategory
      summary: 'Add a new Bmdonationcampaigncategory to the store'
      operationId: addBmdonationcampaigncategory
      requestBody:
        $ref: '#/components/requestBodies/Bmdonationcampaigncategory'
      responses:
        '201':
          description: 'Created Bmdonationcampaigncategory'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bmdonationcampaigncategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bmdonationcampaigncategory'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/bmdonationcampaigncategories/{id}':
    get:
      tags:
        - Bmdonationcampaigncategory
      summary: 'Find Bmdonationcampaigncategory by ID'
      description: 'Returns a single Bmdonationcampaigncategory'
      operationId: getBmdonationcampaigncategoryById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Bmdonationcampaigncategory to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bmdonationcampaigncategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bmdonationcampaigncategory'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Bmdonationcampaigncategory not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Bmdonationcampaigncategory
      summary: 'Update an existing Bmdonationcampaigncategory'
      operationId: updateBmdonationcampaigncategory
      parameters:
        -
          name: id
          in: path
          description: 'Bmdonationcampaigncategory id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Bmdonationcampaigncategory'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Bmdonationcampaigncategory not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Bmdonationcampaigncategory
      summary: 'Deletes a Bmdonationcampaigncategory'
      operationId: deleteBmdonationcampaigncategory
      parameters:
        -
          name: id
          in: path
          description: 'Bmdonationcampaigncategory id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /bmdonationcampaigns:
    get:
      tags:
        - Bmdonationcampaign
      summary: 'Find list Bmdonationcampaign'
      description: 'Returns list of Bmdonationcampaign'
      operationId: getBmdonationcampaign
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bmdonationcampaign' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bmdonationcampaign' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Bmdonationcampaign' } }
                type: object
        '404':
          description: 'Bmdonationcampaign not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Bmdonationcampaign
      summary: 'Add a new Bmdonationcampaign to the store'
      operationId: addBmdonationcampaign
      requestBody:
        $ref: '#/components/requestBodies/Bmdonationcampaign'
      responses:
        '201':
          description: 'Created Bmdonationcampaign'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bmdonationcampaign'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bmdonationcampaign'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/bmdonationcampaigns/{id}':
    get:
      tags:
        - Bmdonationcampaign
      summary: 'Find Bmdonationcampaign by ID'
      description: 'Returns a single Bmdonationcampaign'
      operationId: getBmdonationcampaignById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Bmdonationcampaign to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bmdonationcampaign'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bmdonationcampaign'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Bmdonationcampaign not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Bmdonationcampaign
      summary: 'Update an existing Bmdonationcampaign'
      operationId: updateBmdonationcampaign
      parameters:
        -
          name: id
          in: path
          description: 'Bmdonationcampaign id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Bmdonationcampaign'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Bmdonationcampaign not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Bmdonationcampaign
      summary: 'Deletes a Bmdonationcampaign'
      operationId: deleteBmdonationcampaign
      parameters:
        -
          name: id
          in: path
          description: 'Bmdonationcampaign id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /bmdonationtypes:
    get:
      tags:
        - Bmdonationtype
      summary: 'Find list Bmdonationtype'
      description: 'Returns list of Bmdonationtype'
      operationId: getBmdonationtype
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bmdonationtype' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bmdonationtype' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Bmdonationtype' } }
                type: object
        '404':
          description: 'Bmdonationtype not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Bmdonationtype
      summary: 'Add a new Bmdonationtype to the store'
      operationId: addBmdonationtype
      requestBody:
        $ref: '#/components/requestBodies/Bmdonationtype'
      responses:
        '201':
          description: 'Created Bmdonationtype'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bmdonationtype'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bmdonationtype'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/bmdonationtypes/{id}':
    get:
      tags:
        - Bmdonationtype
      summary: 'Find Bmdonationtype by ID'
      description: 'Returns a single Bmdonationtype'
      operationId: getBmdonationtypeById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Bmdonationtype to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bmdonationtype'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bmdonationtype'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Bmdonationtype not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Bmdonationtype
      summary: 'Update an existing Bmdonationtype'
      operationId: updateBmdonationtype
      parameters:
        -
          name: id
          in: path
          description: 'Bmdonationtype id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Bmdonationtype'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Bmdonationtype not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Bmdonationtype
      summary: 'Deletes a Bmdonationtype'
      operationId: deleteBmdonationtype
      parameters:
        -
          name: id
          in: path
          description: 'Bmdonationtype id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /bminfaqshodaqohcategories:
    get:
      tags:
        - Bminfaqshodaqohcategory
      summary: 'Find list Bminfaqshodaqohcategory'
      description: 'Returns list of Bminfaqshodaqohcategory'
      operationId: getBminfaqshodaqohcategory
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bminfaqshodaqohcategory' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bminfaqshodaqohcategory' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Bminfaqshodaqohcategory' } }
                type: object
        '404':
          description: 'Bminfaqshodaqohcategory not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Bminfaqshodaqohcategory
      summary: 'Add a new Bminfaqshodaqohcategory to the store'
      operationId: addBminfaqshodaqohcategory
      requestBody:
        $ref: '#/components/requestBodies/Bminfaqshodaqohcategory'
      responses:
        '201':
          description: 'Created Bminfaqshodaqohcategory'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bminfaqshodaqohcategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bminfaqshodaqohcategory'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/bminfaqshodaqohcategories/{id}':
    get:
      tags:
        - Bminfaqshodaqohcategory
      summary: 'Find Bminfaqshodaqohcategory by ID'
      description: 'Returns a single Bminfaqshodaqohcategory'
      operationId: getBminfaqshodaqohcategoryById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Bminfaqshodaqohcategory to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bminfaqshodaqohcategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bminfaqshodaqohcategory'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Bminfaqshodaqohcategory not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Bminfaqshodaqohcategory
      summary: 'Update an existing Bminfaqshodaqohcategory'
      operationId: updateBminfaqshodaqohcategory
      parameters:
        -
          name: id
          in: path
          description: 'Bminfaqshodaqohcategory id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Bminfaqshodaqohcategory'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Bminfaqshodaqohcategory not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Bminfaqshodaqohcategory
      summary: 'Deletes a Bminfaqshodaqohcategory'
      operationId: deleteBminfaqshodaqohcategory
      parameters:
        -
          name: id
          in: path
          description: 'Bminfaqshodaqohcategory id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /bminfaqshodaqohs:
    get:
      tags:
        - Bminfaqshodaqoh
      summary: 'Find list Bminfaqshodaqoh'
      description: 'Returns list of Bminfaqshodaqoh'
      operationId: getBminfaqshodaqoh
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bminfaqshodaqoh' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bminfaqshodaqoh' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Bminfaqshodaqoh' } }
                type: object
        '404':
          description: 'Bminfaqshodaqoh not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Bminfaqshodaqoh
      summary: 'Add a new Bminfaqshodaqoh to the store'
      operationId: addBminfaqshodaqoh
      requestBody:
        $ref: '#/components/requestBodies/Bminfaqshodaqoh'
      responses:
        '201':
          description: 'Created Bminfaqshodaqoh'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bminfaqshodaqoh'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bminfaqshodaqoh'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/bminfaqshodaqohs/{id}':
    get:
      tags:
        - Bminfaqshodaqoh
      summary: 'Find Bminfaqshodaqoh by ID'
      description: 'Returns a single Bminfaqshodaqoh'
      operationId: getBminfaqshodaqohById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Bminfaqshodaqoh to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bminfaqshodaqoh'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bminfaqshodaqoh'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Bminfaqshodaqoh not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Bminfaqshodaqoh
      summary: 'Update an existing Bminfaqshodaqoh'
      operationId: updateBminfaqshodaqoh
      parameters:
        -
          name: id
          in: path
          description: 'Bminfaqshodaqoh id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Bminfaqshodaqoh'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Bminfaqshodaqoh not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Bminfaqshodaqoh
      summary: 'Deletes a Bminfaqshodaqoh'
      operationId: deleteBminfaqshodaqoh
      parameters:
        -
          name: id
          in: path
          description: 'Bminfaqshodaqoh id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: 'Find list Campaigns'
      description: 'Returns list of Campaigns'
      operationId: getCampaigns
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Campaigns' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Campaigns' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Campaigns' } }
                type: object
        '404':
          description: 'Campaigns not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Campaigns
      summary: 'Add a new Campaigns to the store'
      operationId: addCampaigns
      requestBody:
        $ref: '#/components/requestBodies/Campaigns'
      responses:
        '201':
          description: 'Created Campaigns'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaigns'
            application/xml:
              schema:
                $ref: '#/components/schemas/Campaigns'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/campaigns/{id}':
    get:
      tags:
        - Campaigns
      summary: 'Find Campaigns by ID'
      description: 'Returns a single Campaigns'
      operationId: getCampaignsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Campaigns to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaigns'
            application/xml:
              schema:
                $ref: '#/components/schemas/Campaigns'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Campaigns not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Campaigns
      summary: 'Update an existing Campaigns'
      operationId: updateCampaigns
      parameters:
        -
          name: id
          in: path
          description: 'Campaigns id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Campaigns'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Campaigns not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Campaigns
      summary: 'Deletes a Campaigns'
      operationId: deleteCampaigns
      parameters:
        -
          name: id
          in: path
          description: 'Campaigns id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /chartOfAccounts:
    get:
      tags:
        - ChartOfAccount
      summary: 'Find list ChartOfAccount'
      description: 'Returns list of ChartOfAccount'
      operationId: getChartOfAccount
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ChartOfAccount' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ChartOfAccount' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/ChartOfAccount' } }
                type: object
        '404':
          description: 'ChartOfAccount not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - ChartOfAccount
      summary: 'Add a new ChartOfAccount to the store'
      operationId: addChartOfAccount
      requestBody:
        $ref: '#/components/requestBodies/ChartOfAccount'
      responses:
        '201':
          description: 'Created ChartOfAccount'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartOfAccount'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChartOfAccount'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/chartOfAccounts/{id}':
    get:
      tags:
        - ChartOfAccount
      summary: 'Find ChartOfAccount by ID'
      description: 'Returns a single ChartOfAccount'
      operationId: getChartOfAccountById
      parameters:
        -
          name: id
          in: path
          description: 'ID of ChartOfAccount to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartOfAccount'
            application/xml:
              schema:
                $ref: '#/components/schemas/ChartOfAccount'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'ChartOfAccount not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - ChartOfAccount
      summary: 'Update an existing ChartOfAccount'
      operationId: updateChartOfAccount
      parameters:
        -
          name: id
          in: path
          description: 'ChartOfAccount id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/ChartOfAccount'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'ChartOfAccount not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - ChartOfAccount
      summary: 'Deletes a ChartOfAccount'
      operationId: deleteChartOfAccount
      parameters:
        -
          name: id
          in: path
          description: 'ChartOfAccount id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /donasis:
    get:
      tags:
        - Donasi
      summary: 'Find list Donasi'
      description: 'Returns list of Donasi'
      operationId: getDonasi
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Donasi' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Donasi' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Donasi' } }
                type: object
        '404':
          description: 'Donasi not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Donasi
      summary: 'Add a new Donasi to the store'
      operationId: addDonasi
      requestBody:
        $ref: '#/components/requestBodies/Donasi'
      responses:
        '201':
          description: 'Created Donasi'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donasi'
            application/xml:
              schema:
                $ref: '#/components/schemas/Donasi'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/donasis/{id}':
    get:
      tags:
        - Donasi
      summary: 'Find Donasi by ID'
      description: 'Returns a single Donasi'
      operationId: getDonasiById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Donasi to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donasi'
            application/xml:
              schema:
                $ref: '#/components/schemas/Donasi'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Donasi not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Donasi
      summary: 'Update an existing Donasi'
      operationId: updateDonasi
      parameters:
        -
          name: id
          in: path
          description: 'Donasi id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Donasi'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Donasi not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Donasi
      summary: 'Deletes a Donasi'
      operationId: deleteDonasi
      parameters:
        -
          name: id
          in: path
          description: 'Donasi id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /donaturTypes:
    get:
      tags:
        - DonaturType
      summary: 'Find list DonaturType'
      description: 'Returns list of DonaturType'
      operationId: getDonaturType
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/DonaturType' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/DonaturType' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/DonaturType' } }
                type: object
        '404':
          description: 'DonaturType not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - DonaturType
      summary: 'Add a new DonaturType to the store'
      operationId: addDonaturType
      requestBody:
        $ref: '#/components/requestBodies/DonaturType'
      responses:
        '201':
          description: 'Created DonaturType'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonaturType'
            application/xml:
              schema:
                $ref: '#/components/schemas/DonaturType'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/donaturTypes/{id}':
    get:
      tags:
        - DonaturType
      summary: 'Find DonaturType by ID'
      description: 'Returns a single DonaturType'
      operationId: getDonaturTypeById
      parameters:
        -
          name: id
          in: path
          description: 'ID of DonaturType to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonaturType'
            application/xml:
              schema:
                $ref: '#/components/schemas/DonaturType'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'DonaturType not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - DonaturType
      summary: 'Update an existing DonaturType'
      operationId: updateDonaturType
      parameters:
        -
          name: id
          in: path
          description: 'DonaturType id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/DonaturType'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'DonaturType not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - DonaturType
      summary: 'Deletes a DonaturType'
      operationId: deleteDonaturType
      parameters:
        -
          name: id
          in: path
          description: 'DonaturType id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /donaturs:
    get:
      tags:
        - Donatur
      summary: 'Find list Donatur'
      description: 'Returns list of Donatur'
      operationId: getDonatur
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Donatur' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Donatur' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Donatur' } }
                type: object
        '404':
          description: 'Donatur not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Donatur
      summary: 'Add a new Donatur to the store'
      operationId: addDonatur
      requestBody:
        $ref: '#/components/requestBodies/Donatur'
      responses:
        '201':
          description: 'Created Donatur'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donatur'
            application/xml:
              schema:
                $ref: '#/components/schemas/Donatur'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/donaturs/{id}':
    get:
      tags:
        - Donatur
      summary: 'Find Donatur by ID'
      description: 'Returns a single Donatur'
      operationId: getDonaturById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Donatur to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donatur'
            application/xml:
              schema:
                $ref: '#/components/schemas/Donatur'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Donatur not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Donatur
      summary: 'Update an existing Donatur'
      operationId: updateDonatur
      parameters:
        -
          name: id
          in: path
          description: 'Donatur id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Donatur'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Donatur not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Donatur
      summary: 'Deletes a Donatur'
      operationId: deleteDonatur
      parameters:
        -
          name: id
          in: path
          description: 'Donatur id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /entities:
    get:
      tags:
        - Entity
      summary: 'Find list Entity'
      description: 'Returns list of Entity'
      operationId: getEntity
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Entity' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Entity' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Entity' } }
                type: object
        '404':
          description: 'Entity not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Entity
      summary: 'Add a new Entity to the store'
      operationId: addEntity
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '201':
          description: 'Created Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
            application/xml:
              schema:
                $ref: '#/components/schemas/Entity'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/entities/{id}':
    get:
      tags:
        - Entity
      summary: 'Find Entity by ID'
      description: 'Returns a single Entity'
      operationId: getEntityById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Entity to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
            application/xml:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Entity not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Entity
      summary: 'Update an existing Entity'
      operationId: updateEntity
      parameters:
        -
          name: id
          in: path
          description: 'Entity id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Entity not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Entity
      summary: 'Deletes a Entity'
      operationId: deleteEntity
      parameters:
        -
          name: id
          in: path
          description: 'Entity id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /imams:
    get:
      tags:
        - Imam
      summary: 'Find list Imam'
      description: 'Returns list of Imam'
      operationId: getImam
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Imam' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Imam' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Imam' } }
                type: object
        '404':
          description: 'Imam not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Imam
      summary: 'Add a new Imam to the store'
      operationId: addImam
      requestBody:
        $ref: '#/components/requestBodies/Imam'
      responses:
        '201':
          description: 'Created Imam'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Imam'
            application/xml:
              schema:
                $ref: '#/components/schemas/Imam'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/imams/{id}':
    get:
      tags:
        - Imam
      summary: 'Find Imam by ID'
      description: 'Returns a single Imam'
      operationId: getImamById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Imam to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Imam'
            application/xml:
              schema:
                $ref: '#/components/schemas/Imam'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Imam not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Imam
      summary: 'Update an existing Imam'
      operationId: updateImam
      parameters:
        -
          name: id
          in: path
          description: 'Imam id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Imam'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Imam not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Imam
      summary: 'Deletes a Imam'
      operationId: deleteImam
      parameters:
        -
          name: id
          in: path
          description: 'Imam id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /jabatans:
    get:
      tags:
        - Jabatan
      summary: 'Find list Jabatan'
      description: 'Returns list of Jabatan'
      operationId: getJabatan
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Jabatan' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Jabatan' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Jabatan' } }
                type: object
        '404':
          description: 'Jabatan not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Jabatan
      summary: 'Add a new Jabatan to the store'
      operationId: addJabatan
      requestBody:
        $ref: '#/components/requestBodies/Jabatan'
      responses:
        '201':
          description: 'Created Jabatan'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jabatan'
            application/xml:
              schema:
                $ref: '#/components/schemas/Jabatan'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/jabatans/{id}':
    get:
      tags:
        - Jabatan
      summary: 'Find Jabatan by ID'
      description: 'Returns a single Jabatan'
      operationId: getJabatanById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Jabatan to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jabatan'
            application/xml:
              schema:
                $ref: '#/components/schemas/Jabatan'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Jabatan not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Jabatan
      summary: 'Update an existing Jabatan'
      operationId: updateJabatan
      parameters:
        -
          name: id
          in: path
          description: 'Jabatan id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Jabatan'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Jabatan not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Jabatan
      summary: 'Deletes a Jabatan'
      operationId: deleteJabatan
      parameters:
        -
          name: id
          in: path
          description: 'Jabatan id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /kategoriPelajarans:
    get:
      tags:
        - KategoriPelajaran
      summary: 'Find list KategoriPelajaran'
      description: 'Returns list of KategoriPelajaran'
      operationId: getKategoriPelajaran
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/KategoriPelajaran' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/KategoriPelajaran' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/KategoriPelajaran' } }
                type: object
        '404':
          description: 'KategoriPelajaran not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - KategoriPelajaran
      summary: 'Add a new KategoriPelajaran to the store'
      operationId: addKategoriPelajaran
      requestBody:
        $ref: '#/components/requestBodies/KategoriPelajaran'
      responses:
        '201':
          description: 'Created KategoriPelajaran'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KategoriPelajaran'
            application/xml:
              schema:
                $ref: '#/components/schemas/KategoriPelajaran'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/kategoriPelajarans/{id}':
    get:
      tags:
        - KategoriPelajaran
      summary: 'Find KategoriPelajaran by ID'
      description: 'Returns a single KategoriPelajaran'
      operationId: getKategoriPelajaranById
      parameters:
        -
          name: id
          in: path
          description: 'ID of KategoriPelajaran to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KategoriPelajaran'
            application/xml:
              schema:
                $ref: '#/components/schemas/KategoriPelajaran'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'KategoriPelajaran not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - KategoriPelajaran
      summary: 'Update an existing KategoriPelajaran'
      operationId: updateKategoriPelajaran
      parameters:
        -
          name: id
          in: path
          description: 'KategoriPelajaran id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/KategoriPelajaran'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'KategoriPelajaran not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - KategoriPelajaran
      summary: 'Deletes a KategoriPelajaran'
      operationId: deleteKategoriPelajaran
      parameters:
        -
          name: id
          in: path
          description: 'KategoriPelajaran id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /kelas:
    get:
      tags:
        - Kelas
      summary: 'Find list Kelas'
      description: 'Returns list of Kelas'
      operationId: getKelas
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Kelas' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Kelas' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Kelas' } }
                type: object
        '404':
          description: 'Kelas not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Kelas
      summary: 'Add a new Kelas to the store'
      operationId: addKelas
      requestBody:
        $ref: '#/components/requestBodies/Kelas'
      responses:
        '201':
          description: 'Created Kelas'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kelas'
            application/xml:
              schema:
                $ref: '#/components/schemas/Kelas'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/kelas/{id}':
    get:
      tags:
        - Kelas
      summary: 'Find Kelas by ID'
      description: 'Returns a single Kelas'
      operationId: getKelasById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Kelas to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kelas'
            application/xml:
              schema:
                $ref: '#/components/schemas/Kelas'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Kelas not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Kelas
      summary: 'Update an existing Kelas'
      operationId: updateKelas
      parameters:
        -
          name: id
          in: path
          description: 'Kelas id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Kelas'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Kelas not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Kelas
      summary: 'Deletes a Kelas'
      operationId: deleteKelas
      parameters:
        -
          name: id
          in: path
          description: 'Kelas id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /languages:
    get:
      tags:
        - Languages
      summary: 'Find list Languages'
      description: 'Returns list of Languages'
      operationId: getLanguages
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Languages' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Languages' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Languages' } }
                type: object
        '404':
          description: 'Languages not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Languages
      summary: 'Add a new Languages to the store'
      operationId: addLanguages
      requestBody:
        $ref: '#/components/requestBodies/Languages'
      responses:
        '201':
          description: 'Created Languages'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Languages'
            application/xml:
              schema:
                $ref: '#/components/schemas/Languages'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/languages/{id}':
    get:
      tags:
        - Languages
      summary: 'Find Languages by ID'
      description: 'Returns a single Languages'
      operationId: getLanguagesById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Languages to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Languages'
            application/xml:
              schema:
                $ref: '#/components/schemas/Languages'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Languages not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Languages
      summary: 'Update an existing Languages'
      operationId: updateLanguages
      parameters:
        -
          name: id
          in: path
          description: 'Languages id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Languages'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Languages not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Languages
      summary: 'Deletes a Languages'
      operationId: deleteLanguages
      parameters:
        -
          name: id
          in: path
          description: 'Languages id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /masterBanks:
    get:
      tags:
        - MasterBank
      summary: 'Find list MasterBank'
      description: 'Returns list of MasterBank'
      operationId: getMasterBank
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/MasterBank' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/MasterBank' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/MasterBank' } }
                type: object
        '404':
          description: 'MasterBank not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - MasterBank
      summary: 'Add a new MasterBank to the store'
      operationId: addMasterBank
      requestBody:
        $ref: '#/components/requestBodies/MasterBank'
      responses:
        '201':
          description: 'Created MasterBank'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterBank'
            application/xml:
              schema:
                $ref: '#/components/schemas/MasterBank'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/masterBanks/{id}':
    get:
      tags:
        - MasterBank
      summary: 'Find MasterBank by ID'
      description: 'Returns a single MasterBank'
      operationId: getMasterBankById
      parameters:
        -
          name: id
          in: path
          description: 'ID of MasterBank to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterBank'
            application/xml:
              schema:
                $ref: '#/components/schemas/MasterBank'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'MasterBank not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - MasterBank
      summary: 'Update an existing MasterBank'
      operationId: updateMasterBank
      parameters:
        -
          name: id
          in: path
          description: 'MasterBank id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/MasterBank'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'MasterBank not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - MasterBank
      summary: 'Deletes a MasterBank'
      operationId: deleteMasterBank
      parameters:
        -
          name: id
          in: path
          description: 'MasterBank id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /masterEwallets:
    get:
      tags:
        - MasterEwallet
      summary: 'Find list MasterEwallet'
      description: 'Returns list of MasterEwallet'
      operationId: getMasterEwallet
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/MasterEwallet' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/MasterEwallet' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/MasterEwallet' } }
                type: object
        '404':
          description: 'MasterEwallet not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - MasterEwallet
      summary: 'Add a new MasterEwallet to the store'
      operationId: addMasterEwallet
      requestBody:
        $ref: '#/components/requestBodies/MasterEwallet'
      responses:
        '201':
          description: 'Created MasterEwallet'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterEwallet'
            application/xml:
              schema:
                $ref: '#/components/schemas/MasterEwallet'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/masterEwallets/{id}':
    get:
      tags:
        - MasterEwallet
      summary: 'Find MasterEwallet by ID'
      description: 'Returns a single MasterEwallet'
      operationId: getMasterEwalletById
      parameters:
        -
          name: id
          in: path
          description: 'ID of MasterEwallet to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterEwallet'
            application/xml:
              schema:
                $ref: '#/components/schemas/MasterEwallet'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'MasterEwallet not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - MasterEwallet
      summary: 'Update an existing MasterEwallet'
      operationId: updateMasterEwallet
      parameters:
        -
          name: id
          in: path
          description: 'MasterEwallet id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/MasterEwallet'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'MasterEwallet not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - MasterEwallet
      summary: 'Deletes a MasterEwallet'
      operationId: deleteMasterEwallet
      parameters:
        -
          name: id
          in: path
          description: 'MasterEwallet id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /masterPaymentgateways:
    get:
      tags:
        - MasterPaymentgateway
      summary: 'Find list MasterPaymentgateway'
      description: 'Returns list of MasterPaymentgateway'
      operationId: getMasterPaymentgateway
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/MasterPaymentgateway' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/MasterPaymentgateway' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/MasterPaymentgateway' } }
                type: object
        '404':
          description: 'MasterPaymentgateway not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - MasterPaymentgateway
      summary: 'Add a new MasterPaymentgateway to the store'
      operationId: addMasterPaymentgateway
      requestBody:
        $ref: '#/components/requestBodies/MasterPaymentgateway'
      responses:
        '201':
          description: 'Created MasterPaymentgateway'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterPaymentgateway'
            application/xml:
              schema:
                $ref: '#/components/schemas/MasterPaymentgateway'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/masterPaymentgateways/{id}':
    get:
      tags:
        - MasterPaymentgateway
      summary: 'Find MasterPaymentgateway by ID'
      description: 'Returns a single MasterPaymentgateway'
      operationId: getMasterPaymentgatewayById
      parameters:
        -
          name: id
          in: path
          description: 'ID of MasterPaymentgateway to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterPaymentgateway'
            application/xml:
              schema:
                $ref: '#/components/schemas/MasterPaymentgateway'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'MasterPaymentgateway not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - MasterPaymentgateway
      summary: 'Update an existing MasterPaymentgateway'
      operationId: updateMasterPaymentgateway
      parameters:
        -
          name: id
          in: path
          description: 'MasterPaymentgateway id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/MasterPaymentgateway'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'MasterPaymentgateway not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - MasterPaymentgateway
      summary: 'Deletes a MasterPaymentgateway'
      operationId: deleteMasterPaymentgateway
      parameters:
        -
          name: id
          in: path
          description: 'MasterPaymentgateway id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /materis:
    get:
      tags:
        - Materi
      summary: 'Find list Materi'
      description: 'Returns list of Materi'
      operationId: getMateri
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Materi' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Materi' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Materi' } }
                type: object
        '404':
          description: 'Materi not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Materi
      summary: 'Add a new Materi to the store'
      operationId: addMateri
      requestBody:
        $ref: '#/components/requestBodies/Materi'
      responses:
        '201':
          description: 'Created Materi'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Materi'
            application/xml:
              schema:
                $ref: '#/components/schemas/Materi'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/materis/{id}':
    get:
      tags:
        - Materi
      summary: 'Find Materi by ID'
      description: 'Returns a single Materi'
      operationId: getMateriById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Materi to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Materi'
            application/xml:
              schema:
                $ref: '#/components/schemas/Materi'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Materi not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Materi
      summary: 'Update an existing Materi'
      operationId: updateMateri
      parameters:
        -
          name: id
          in: path
          description: 'Materi id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Materi'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Materi not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Materi
      summary: 'Deletes a Materi'
      operationId: deleteMateri
      parameters:
        -
          name: id
          in: path
          description: 'Materi id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /members:
    get:
      tags:
        - Member
      summary: 'Find list Member'
      description: 'Returns list of Member'
      operationId: getMember
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Member' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Member' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Member' } }
                type: object
        '404':
          description: 'Member not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Member
      summary: 'Add a new Member to the store'
      operationId: addMember
      requestBody:
        $ref: '#/components/requestBodies/Member'
      responses:
        '201':
          description: 'Created Member'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
            application/xml:
              schema:
                $ref: '#/components/schemas/Member'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/members/{id}':
    get:
      tags:
        - Member
      summary: 'Find Member by ID'
      description: 'Returns a single Member'
      operationId: getMemberById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Member to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
            application/xml:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Member not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Member
      summary: 'Update an existing Member'
      operationId: updateMember
      parameters:
        -
          name: id
          in: path
          description: 'Member id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Member'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Member not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Member
      summary: 'Deletes a Member'
      operationId: deleteMember
      parameters:
        -
          name: id
          in: path
          description: 'Member id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /nonRawatibSchedules:
    get:
      tags:
        - NonRawatibSchedule
      summary: 'Find list NonRawatibSchedule'
      description: 'Returns list of NonRawatibSchedule'
      operationId: getNonRawatibSchedule
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/NonRawatibSchedule' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/NonRawatibSchedule' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/NonRawatibSchedule' } }
                type: object
        '404':
          description: 'NonRawatibSchedule not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - NonRawatibSchedule
      summary: 'Add a new NonRawatibSchedule to the store'
      operationId: addNonRawatibSchedule
      requestBody:
        $ref: '#/components/requestBodies/NonRawatibSchedule'
      responses:
        '201':
          description: 'Created NonRawatibSchedule'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonRawatibSchedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/NonRawatibSchedule'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/nonRawatibSchedules/{id}':
    get:
      tags:
        - NonRawatibSchedule
      summary: 'Find NonRawatibSchedule by ID'
      description: 'Returns a single NonRawatibSchedule'
      operationId: getNonRawatibScheduleById
      parameters:
        -
          name: id
          in: path
          description: 'ID of NonRawatibSchedule to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonRawatibSchedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/NonRawatibSchedule'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'NonRawatibSchedule not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - NonRawatibSchedule
      summary: 'Update an existing NonRawatibSchedule'
      operationId: updateNonRawatibSchedule
      parameters:
        -
          name: id
          in: path
          description: 'NonRawatibSchedule id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/NonRawatibSchedule'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'NonRawatibSchedule not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - NonRawatibSchedule
      summary: 'Deletes a NonRawatibSchedule'
      operationId: deleteNonRawatibSchedule
      parameters:
        -
          name: id
          in: path
          description: 'NonRawatibSchedule id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /paymentCategories:
    get:
      tags:
        - PaymentCategory
      summary: 'Find list PaymentCategory'
      description: 'Returns list of PaymentCategory'
      operationId: getPaymentCategory
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PaymentCategory' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PaymentCategory' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/PaymentCategory' } }
                type: object
        '404':
          description: 'PaymentCategory not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - PaymentCategory
      summary: 'Add a new PaymentCategory to the store'
      operationId: addPaymentCategory
      requestBody:
        $ref: '#/components/requestBodies/PaymentCategory'
      responses:
        '201':
          description: 'Created PaymentCategory'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentCategory'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/paymentCategories/{id}':
    get:
      tags:
        - PaymentCategory
      summary: 'Find PaymentCategory by ID'
      description: 'Returns a single PaymentCategory'
      operationId: getPaymentCategoryById
      parameters:
        -
          name: id
          in: path
          description: 'ID of PaymentCategory to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentCategory'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'PaymentCategory not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - PaymentCategory
      summary: 'Update an existing PaymentCategory'
      operationId: updatePaymentCategory
      parameters:
        -
          name: id
          in: path
          description: 'PaymentCategory id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/PaymentCategory'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'PaymentCategory not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - PaymentCategory
      summary: 'Deletes a PaymentCategory'
      operationId: deletePaymentCategory
      parameters:
        -
          name: id
          in: path
          description: 'PaymentCategory id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /paymentMethods:
    get:
      tags:
        - PaymentMethod
      summary: 'Find list PaymentMethod'
      description: 'Returns list of PaymentMethod'
      operationId: getPaymentMethod
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PaymentMethod' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PaymentMethod' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/PaymentMethod' } }
                type: object
        '404':
          description: 'PaymentMethod not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - PaymentMethod
      summary: 'Add a new PaymentMethod to the store'
      operationId: addPaymentMethod
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethod'
      responses:
        '201':
          description: 'Created PaymentMethod'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/paymentMethods/{id}':
    get:
      tags:
        - PaymentMethod
      summary: 'Find PaymentMethod by ID'
      description: 'Returns a single PaymentMethod'
      operationId: getPaymentMethodById
      parameters:
        -
          name: id
          in: path
          description: 'ID of PaymentMethod to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'PaymentMethod not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - PaymentMethod
      summary: 'Update an existing PaymentMethod'
      operationId: updatePaymentMethod
      parameters:
        -
          name: id
          in: path
          description: 'PaymentMethod id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethod'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'PaymentMethod not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - PaymentMethod
      summary: 'Deletes a PaymentMethod'
      operationId: deletePaymentMethod
      parameters:
        -
          name: id
          in: path
          description: 'PaymentMethod id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /pelajarans:
    get:
      tags:
        - Pelajaran
      summary: 'Find list Pelajaran'
      description: 'Returns list of Pelajaran'
      operationId: getPelajaran
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Pelajaran' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Pelajaran' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Pelajaran' } }
                type: object
        '404':
          description: 'Pelajaran not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Pelajaran
      summary: 'Add a new Pelajaran to the store'
      operationId: addPelajaran
      requestBody:
        $ref: '#/components/requestBodies/Pelajaran'
      responses:
        '201':
          description: 'Created Pelajaran'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pelajaran'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pelajaran'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/pelajarans/{id}':
    get:
      tags:
        - Pelajaran
      summary: 'Find Pelajaran by ID'
      description: 'Returns a single Pelajaran'
      operationId: getPelajaranById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Pelajaran to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pelajaran'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pelajaran'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Pelajaran not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Pelajaran
      summary: 'Update an existing Pelajaran'
      operationId: updatePelajaran
      parameters:
        -
          name: id
          in: path
          description: 'Pelajaran id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Pelajaran'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pelajaran not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Pelajaran
      summary: 'Deletes a Pelajaran'
      operationId: deletePelajaran
      parameters:
        -
          name: id
          in: path
          description: 'Pelajaran id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /pendaftarans:
    get:
      tags:
        - Pendaftaran
      summary: 'Find list Pendaftaran'
      description: 'Returns list of Pendaftaran'
      operationId: getPendaftaran
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Pendaftaran' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Pendaftaran' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Pendaftaran' } }
                type: object
        '404':
          description: 'Pendaftaran not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Pendaftaran
      summary: 'Add a new Pendaftaran to the store'
      operationId: addPendaftaran
      requestBody:
        $ref: '#/components/requestBodies/Pendaftaran'
      responses:
        '201':
          description: 'Created Pendaftaran'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pendaftaran'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pendaftaran'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/pendaftarans/{id}':
    get:
      tags:
        - Pendaftaran
      summary: 'Find Pendaftaran by ID'
      description: 'Returns a single Pendaftaran'
      operationId: getPendaftaranById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Pendaftaran to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pendaftaran'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pendaftaran'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Pendaftaran not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Pendaftaran
      summary: 'Update an existing Pendaftaran'
      operationId: updatePendaftaran
      parameters:
        -
          name: id
          in: path
          description: 'Pendaftaran id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Pendaftaran'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pendaftaran not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Pendaftaran
      summary: 'Deletes a Pendaftaran'
      operationId: deletePendaftaran
      parameters:
        -
          name: id
          in: path
          description: 'Pendaftaran id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /pengurus:
    get:
      tags:
        - Pengurus
      summary: 'Find list Pengurus'
      description: 'Returns list of Pengurus'
      operationId: getPengurus
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Pengurus' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Pengurus' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Pengurus' } }
                type: object
        '404':
          description: 'Pengurus not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Pengurus
      summary: 'Add a new Pengurus to the store'
      operationId: addPengurus
      requestBody:
        $ref: '#/components/requestBodies/Pengurus'
      responses:
        '201':
          description: 'Created Pengurus'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pengurus'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pengurus'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/pengurus/{id}':
    get:
      tags:
        - Pengurus
      summary: 'Find Pengurus by ID'
      description: 'Returns a single Pengurus'
      operationId: getPengurusById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Pengurus to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pengurus'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pengurus'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Pengurus not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Pengurus
      summary: 'Update an existing Pengurus'
      operationId: updatePengurus
      parameters:
        -
          name: id
          in: path
          description: 'Pengurus id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Pengurus'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pengurus not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Pengurus
      summary: 'Deletes a Pengurus'
      operationId: deletePengurus
      parameters:
        -
          name: id
          in: path
          description: 'Pengurus id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /profiles:
    get:
      tags:
        - Profile
      summary: 'Find list Profile'
      description: 'Returns list of Profile'
      operationId: getProfile
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Profile' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Profile' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Profile' } }
                type: object
        '404':
          description: 'Profile not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Profile
      summary: 'Add a new Profile to the store'
      operationId: addProfile
      requestBody:
        $ref: '#/components/requestBodies/Profile'
      responses:
        '201':
          description: 'Created Profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/profiles/{id}':
    get:
      tags:
        - Profile
      summary: 'Find Profile by ID'
      description: 'Returns a single Profile'
      operationId: getProfileById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Profile to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Profile not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Profile
      summary: 'Update an existing Profile'
      operationId: updateProfile
      parameters:
        -
          name: id
          in: path
          description: 'Profile id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Profile'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Profile not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Profile
      summary: 'Deletes a Profile'
      operationId: deleteProfile
      parameters:
        -
          name: id
          in: path
          description: 'Profile id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /programCategories:
    get:
      tags:
        - ProgramCategory
      summary: 'Find list ProgramCategory'
      description: 'Returns list of ProgramCategory'
      operationId: getProgramCategory
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ProgramCategory' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ProgramCategory' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/ProgramCategory' } }
                type: object
        '404':
          description: 'ProgramCategory not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - ProgramCategory
      summary: 'Add a new ProgramCategory to the store'
      operationId: addProgramCategory
      requestBody:
        $ref: '#/components/requestBodies/ProgramCategory'
      responses:
        '201':
          description: 'Created ProgramCategory'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramCategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProgramCategory'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/programCategories/{id}':
    get:
      tags:
        - ProgramCategory
      summary: 'Find ProgramCategory by ID'
      description: 'Returns a single ProgramCategory'
      operationId: getProgramCategoryById
      parameters:
        -
          name: id
          in: path
          description: 'ID of ProgramCategory to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramCategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProgramCategory'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'ProgramCategory not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - ProgramCategory
      summary: 'Update an existing ProgramCategory'
      operationId: updateProgramCategory
      parameters:
        -
          name: id
          in: path
          description: 'ProgramCategory id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/ProgramCategory'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'ProgramCategory not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - ProgramCategory
      summary: 'Deletes a ProgramCategory'
      operationId: deleteProgramCategory
      parameters:
        -
          name: id
          in: path
          description: 'ProgramCategory id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /programCosts:
    get:
      tags:
        - ProgramCost
      summary: 'Find list ProgramCost'
      description: 'Returns list of ProgramCost'
      operationId: getProgramCost
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ProgramCost' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ProgramCost' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/ProgramCost' } }
                type: object
        '404':
          description: 'ProgramCost not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - ProgramCost
      summary: 'Add a new ProgramCost to the store'
      operationId: addProgramCost
      requestBody:
        $ref: '#/components/requestBodies/ProgramCost'
      responses:
        '201':
          description: 'Created ProgramCost'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramCost'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProgramCost'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/programCosts/{id}':
    get:
      tags:
        - ProgramCost
      summary: 'Find ProgramCost by ID'
      description: 'Returns a single ProgramCost'
      operationId: getProgramCostById
      parameters:
        -
          name: id
          in: path
          description: 'ID of ProgramCost to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramCost'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProgramCost'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'ProgramCost not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - ProgramCost
      summary: 'Update an existing ProgramCost'
      operationId: updateProgramCost
      parameters:
        -
          name: id
          in: path
          description: 'ProgramCost id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/ProgramCost'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'ProgramCost not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - ProgramCost
      summary: 'Deletes a ProgramCost'
      operationId: deleteProgramCost
      parameters:
        -
          name: id
          in: path
          description: 'ProgramCost id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /programs:
    get:
      tags:
        - Program
      summary: 'Find list Program'
      description: 'Returns list of Program'
      operationId: getProgram
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Program' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Program' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Program' } }
                type: object
        '404':
          description: 'Program not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Program
      summary: 'Add a new Program to the store'
      operationId: addProgram
      requestBody:
        $ref: '#/components/requestBodies/Program'
      responses:
        '201':
          description: 'Created Program'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
            application/xml:
              schema:
                $ref: '#/components/schemas/Program'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/programs/{id}':
    get:
      tags:
        - Program
      summary: 'Find Program by ID'
      description: 'Returns a single Program'
      operationId: getProgramById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Program to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
            application/xml:
              schema:
                $ref: '#/components/schemas/Program'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Program not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Program
      summary: 'Update an existing Program'
      operationId: updateProgram
      parameters:
        -
          name: id
          in: path
          description: 'Program id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Program'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Program not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Program
      summary: 'Deletes a Program'
      operationId: deleteProgram
      parameters:
        -
          name: id
          in: path
          description: 'Program id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /rawatibSchedules:
    get:
      tags:
        - RawatibSchedule
      summary: 'Find list RawatibSchedule'
      description: 'Returns list of RawatibSchedule'
      operationId: getRawatibSchedule
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/RawatibSchedule' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/RawatibSchedule' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/RawatibSchedule' } }
                type: object
        '404':
          description: 'RawatibSchedule not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - RawatibSchedule
      summary: 'Add a new RawatibSchedule to the store'
      operationId: addRawatibSchedule
      requestBody:
        $ref: '#/components/requestBodies/RawatibSchedule'
      responses:
        '201':
          description: 'Created RawatibSchedule'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawatibSchedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/RawatibSchedule'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/rawatibSchedules/{id}':
    get:
      tags:
        - RawatibSchedule
      summary: 'Find RawatibSchedule by ID'
      description: 'Returns a single RawatibSchedule'
      operationId: getRawatibScheduleById
      parameters:
        -
          name: id
          in: path
          description: 'ID of RawatibSchedule to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawatibSchedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/RawatibSchedule'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'RawatibSchedule not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - RawatibSchedule
      summary: 'Update an existing RawatibSchedule'
      operationId: updateRawatibSchedule
      parameters:
        -
          name: id
          in: path
          description: 'RawatibSchedule id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/RawatibSchedule'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'RawatibSchedule not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - RawatibSchedule
      summary: 'Deletes a RawatibSchedule'
      operationId: deleteRawatibSchedule
      parameters:
        -
          name: id
          in: path
          description: 'RawatibSchedule id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitemenus:
    get:
      tags:
        - Sitemenus
      summary: 'Find list Sitemenus'
      description: 'Returns list of Sitemenus'
      operationId: getSitemenus
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitemenus' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitemenus' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitemenus' } }
                type: object
        '404':
          description: 'Sitemenus not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitemenus
      summary: 'Add a new Sitemenus to the store'
      operationId: addSitemenus
      requestBody:
        $ref: '#/components/requestBodies/Sitemenus'
      responses:
        '201':
          description: 'Created Sitemenus'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitemenus'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitemenus'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitemenus/{id}':
    get:
      tags:
        - Sitemenus
      summary: 'Find Sitemenus by ID'
      description: 'Returns a single Sitemenus'
      operationId: getSitemenusById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitemenus to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitemenus'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitemenus'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitemenus not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitemenus
      summary: 'Update an existing Sitemenus'
      operationId: updateSitemenus
      parameters:
        -
          name: id
          in: path
          description: 'Sitemenus id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitemenus'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitemenus not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitemenus
      summary: 'Deletes a Sitemenus'
      operationId: deleteSitemenus
      parameters:
        -
          name: id
          in: path
          description: 'Sitemenus id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitepages:
    get:
      tags:
        - Sitepages
      summary: 'Find list Sitepages'
      description: 'Returns list of Sitepages'
      operationId: getSitepages
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitepages' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitepages' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitepages' } }
                type: object
        '404':
          description: 'Sitepages not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitepages
      summary: 'Add a new Sitepages to the store'
      operationId: addSitepages
      requestBody:
        $ref: '#/components/requestBodies/Sitepages'
      responses:
        '201':
          description: 'Created Sitepages'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitepages'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitepages'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitepages/{id}':
    get:
      tags:
        - Sitepages
      summary: 'Find Sitepages by ID'
      description: 'Returns a single Sitepages'
      operationId: getSitepagesById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitepages to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitepages'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitepages'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitepages not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitepages
      summary: 'Update an existing Sitepages'
      operationId: updateSitepages
      parameters:
        -
          name: id
          in: path
          description: 'Sitepages id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitepages'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitepages not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitepages
      summary: 'Deletes a Sitepages'
      operationId: deleteSitepages
      parameters:
        -
          name: id
          in: path
          description: 'Sitepages id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /siteposts:
    get:
      tags:
        - Siteposts
      summary: 'Find list Siteposts'
      description: 'Returns list of Siteposts'
      operationId: getSiteposts
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Siteposts' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Siteposts' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Siteposts' } }
                type: object
        '404':
          description: 'Siteposts not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Siteposts
      summary: 'Add a new Siteposts to the store'
      operationId: addSiteposts
      requestBody:
        $ref: '#/components/requestBodies/Siteposts'
      responses:
        '201':
          description: 'Created Siteposts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Siteposts'
            application/xml:
              schema:
                $ref: '#/components/schemas/Siteposts'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/siteposts/{id}':
    get:
      tags:
        - Siteposts
      summary: 'Find Siteposts by ID'
      description: 'Returns a single Siteposts'
      operationId: getSitepostsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Siteposts to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Siteposts'
            application/xml:
              schema:
                $ref: '#/components/schemas/Siteposts'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Siteposts not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Siteposts
      summary: 'Update an existing Siteposts'
      operationId: updateSiteposts
      parameters:
        -
          name: id
          in: path
          description: 'Siteposts id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Siteposts'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Siteposts not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Siteposts
      summary: 'Deletes a Siteposts'
      operationId: deleteSiteposts
      parameters:
        -
          name: id
          in: path
          description: 'Siteposts id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitesections:
    get:
      tags:
        - Sitesections
      summary: 'Find list Sitesections'
      description: 'Returns list of Sitesections'
      operationId: getSitesections
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesections' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesections' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitesections' } }
                type: object
        '404':
          description: 'Sitesections not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitesections
      summary: 'Add a new Sitesections to the store'
      operationId: addSitesections
      requestBody:
        $ref: '#/components/requestBodies/Sitesections'
      responses:
        '201':
          description: 'Created Sitesections'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesections'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesections'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitesections/{id}':
    get:
      tags:
        - Sitesections
      summary: 'Find Sitesections by ID'
      description: 'Returns a single Sitesections'
      operationId: getSitesectionsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitesections to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesections'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesections'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitesections not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitesections
      summary: 'Update an existing Sitesections'
      operationId: updateSitesections
      parameters:
        -
          name: id
          in: path
          description: 'Sitesections id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitesections'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitesections not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitesections
      summary: 'Deletes a Sitesections'
      operationId: deleteSitesections
      parameters:
        -
          name: id
          in: path
          description: 'Sitesections id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitesliders:
    get:
      tags:
        - Sitesliders
      summary: 'Find list Sitesliders'
      description: 'Returns list of Sitesliders'
      operationId: getSitesliders
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesliders' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesliders' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitesliders' } }
                type: object
        '404':
          description: 'Sitesliders not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitesliders
      summary: 'Add a new Sitesliders to the store'
      operationId: addSitesliders
      requestBody:
        $ref: '#/components/requestBodies/Sitesliders'
      responses:
        '201':
          description: 'Created Sitesliders'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesliders'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesliders'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitesliders/{id}':
    get:
      tags:
        - Sitesliders
      summary: 'Find Sitesliders by ID'
      description: 'Returns a single Sitesliders'
      operationId: getSiteslidersById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitesliders to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesliders'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesliders'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitesliders not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitesliders
      summary: 'Update an existing Sitesliders'
      operationId: updateSitesliders
      parameters:
        -
          name: id
          in: path
          description: 'Sitesliders id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitesliders'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitesliders not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitesliders
      summary: 'Deletes a Sitesliders'
      operationId: deleteSitesliders
      parameters:
        -
          name: id
          in: path
          description: 'Sitesliders id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitesocials:
    get:
      tags:
        - Sitesocials
      summary: 'Find list Sitesocials'
      description: 'Returns list of Sitesocials'
      operationId: getSitesocials
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesocials' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesocials' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitesocials' } }
                type: object
        '404':
          description: 'Sitesocials not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitesocials
      summary: 'Add a new Sitesocials to the store'
      operationId: addSitesocials
      requestBody:
        $ref: '#/components/requestBodies/Sitesocials'
      responses:
        '201':
          description: 'Created Sitesocials'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesocials'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesocials'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitesocials/{id}':
    get:
      tags:
        - Sitesocials
      summary: 'Find Sitesocials by ID'
      description: 'Returns a single Sitesocials'
      operationId: getSitesocialsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitesocials to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesocials'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesocials'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitesocials not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitesocials
      summary: 'Update an existing Sitesocials'
      operationId: updateSitesocials
      parameters:
        -
          name: id
          in: path
          description: 'Sitesocials id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitesocials'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitesocials not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitesocials
      summary: 'Deletes a Sitesocials'
      operationId: deleteSitesocials
      parameters:
        -
          name: id
          in: path
          description: 'Sitesocials id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /uomCategories:
    get:
      tags:
        - UomCategory
      summary: 'Find list UomCategory'
      description: 'Returns list of UomCategory'
      operationId: getUomCategory
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/UomCategory' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/UomCategory' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/UomCategory' } }
                type: object
        '404':
          description: 'UomCategory not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - UomCategory
      summary: 'Add a new UomCategory to the store'
      operationId: addUomCategory
      requestBody:
        $ref: '#/components/requestBodies/UomCategory'
      responses:
        '201':
          description: 'Created UomCategory'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UomCategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/UomCategory'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/uomCategories/{id}':
    get:
      tags:
        - UomCategory
      summary: 'Find UomCategory by ID'
      description: 'Returns a single UomCategory'
      operationId: getUomCategoryById
      parameters:
        -
          name: id
          in: path
          description: 'ID of UomCategory to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UomCategory'
            application/xml:
              schema:
                $ref: '#/components/schemas/UomCategory'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'UomCategory not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - UomCategory
      summary: 'Update an existing UomCategory'
      operationId: updateUomCategory
      parameters:
        -
          name: id
          in: path
          description: 'UomCategory id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/UomCategory'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'UomCategory not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - UomCategory
      summary: 'Deletes a UomCategory'
      operationId: deleteUomCategory
      parameters:
        -
          name: id
          in: path
          description: 'UomCategory id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /uoms:
    get:
      tags:
        - Uom
      summary: 'Find list Uom'
      description: 'Returns list of Uom'
      operationId: getUom
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Uom' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Uom' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Uom' } }
                type: object
        '404':
          description: 'Uom not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Uom
      summary: 'Add a new Uom to the store'
      operationId: addUom
      requestBody:
        $ref: '#/components/requestBodies/Uom'
      responses:
        '201':
          description: 'Created Uom'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uom'
            application/xml:
              schema:
                $ref: '#/components/schemas/Uom'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/uoms/{id}':
    get:
      tags:
        - Uom
      summary: 'Find Uom by ID'
      description: 'Returns a single Uom'
      operationId: getUomById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Uom to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uom'
            application/xml:
              schema:
                $ref: '#/components/schemas/Uom'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Uom not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Uom
      summary: 'Update an existing Uom'
      operationId: updateUom
      parameters:
        -
          name: id
          in: path
          description: 'Uom id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Uom'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Uom not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Uom
      summary: 'Deletes a Uom'
      operationId: deleteUom
      parameters:
        -
          name: id
          in: path
          description: 'Uom id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /users:
    get:
      tags:
        - Users
      summary: 'Find list Users'
      description: 'Returns list of Users'
      operationId: getUsers
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Users' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Users' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Users' } }
                type: object
        '404':
          description: 'Users not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Users
      summary: 'Add a new Users to the store'
      operationId: addUsers
      requestBody:
        $ref: '#/components/requestBodies/Users'
      responses:
        '201':
          description: 'Created Users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/users/{id}':
    get:
      tags:
        - Users
      summary: 'Find Users by ID'
      description: 'Returns a single Users'
      operationId: getUsersById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Users to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Users not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Users
      summary: 'Update an existing Users'
      operationId: updateUsers
      parameters:
        -
          name: id
          in: path
          description: 'Users id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Users'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Users not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Users
      summary: 'Deletes a Users'
      operationId: deleteUsers
      parameters:
        -
          name: id
          in: path
          description: 'Users id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /wilayahs:
    get:
      tags:
        - Wilayah
      summary: 'Find list Wilayah'
      description: 'Returns list of Wilayah'
      operationId: getWilayah
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Wilayah' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Wilayah' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Wilayah' } }
                type: object
        '404':
          description: 'Wilayah not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Wilayah
      summary: 'Add a new Wilayah to the store'
      operationId: addWilayah
      requestBody:
        $ref: '#/components/requestBodies/Wilayah'
      responses:
        '201':
          description: 'Created Wilayah'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wilayah'
            application/xml:
              schema:
                $ref: '#/components/schemas/Wilayah'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/wilayahs/{kode}':
    get:
      tags:
        - Wilayah
      summary: 'Find Wilayah by kode'
      description: 'Returns a single Wilayah'
      operationId: getWilayahById
      parameters:
        -
          name: kode
          in: path
          description: 'Kode of Wilayah to return'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wilayah'
            application/xml:
              schema:
                $ref: '#/components/schemas/Wilayah'
        '400':
          description: 'Invalid Kode wilayah'
        '404':
          description: 'Wilayah not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Wilayah
      summary: 'Update an existing Wilayah'
      operationId: updateWilayah
      parameters:
        -
          name: kode
          in: path
          description: 'Wilayah kode to update'
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Wilayah'
      responses:
        '400':
          description: 'Invalid Kode supplied'
        '404':
          description: 'Wilayah not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Wilayah
      summary: 'Deletes a Wilayah'
      operationId: deleteWilayah
      parameters:
        -
          name: kode
          in: path
          description: 'Wilayah kode to delete'
          required: true
          schema:
            type: string
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
components:
  schemas:
    AccountBalance:
      title: AccountBalance
      description: AccountBalance
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 50
        account:
          nullable: false
          title: account
          description: account
          type: string
          format: '-'
          maxLength: 50
        entity_id:
          nullable: false
          title: entity_id
          description: entity_id
          type: integer
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Bab:
      title: Bab
      description: Bab
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        pelajaran_id:
          nullable: false
          title: pelajaran_id
          description: pelajaran_id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        sequence:
          nullable: true
          title: sequence
          description: sequence
          type: integer
          format: '-'
          maxLength: 11
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Balance:
      title: Balance
      description: Balance
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        account_balance_id:
          nullable: false
          title: account_balance_id
          description: account_balance_id
          type: integer
          format: '-'
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
          maxLength: 200
        type:
          nullable: false
          title: type
          description: type
          type: string
        amount:
          nullable: false
          title: amount
          description: amount
          type: integer
          format: '-'
        transaction_date:
          nullable: false
          title: transaction_date
          description: transaction_date
          type: string
          format: date
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Bmdonationcampaign:
      title: Bmdonationcampaign
      description: Bmdonationcampaign
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        label:
          nullable: false
          title: label
          description: label
          type: string
          format: '-'
          maxLength: 255
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        description:
          nullable: true
          title: description
          description: description
          type: string
          format: '-'
          maxLength: 255
        campaignstart_date:
          nullable: false
          title: campaignstart_date
          description: campaignstart_date
          type: string
          format: date
        campaignend_date:
          nullable: false
          title: campaignend_date
          description: campaignend_date
          type: string
          format: date
        campaign_tonase:
          nullable: true
          title: campaign_tonase
          description: campaign_tonase
          type: number
          format: float
          maxLength: 10
        campaigncategory_id:
          nullable: true
          title: campaigncategory_id
          description: campaigncategory_id
          type: integer
          format: '-'
          maxLength: 11
        donationtype_id:
          nullable: true
          title: donationtype_id
          description: donationtype_id
          type: integer
          format: '-'
          maxLength: 11
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Bmdonationcampaigncategory:
      title: Bmdonationcampaigncategory
      description: Bmdonationcampaigncategory
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 128
        label:
          nullable: false
          title: label
          description: label
          type: string
          format: '-'
          maxLength: 255
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Bmdonationtype:
      title: Bmdonationtype
      description: Bmdonationtype
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        description:
          nullable: true
          title: description
          description: description
          type: string
          format: '-'
          maxLength: 255
        uom_id:
          nullable: true
          title: uom_id
          description: uom_id
          type: integer
          format: '-'
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Bminfaqshodaqoh:
      title: Bminfaqshodaqoh
      description: Bminfaqshodaqoh
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 128
        label:
          nullable: false
          title: label
          description: label
          type: string
          format: '-'
          maxLength: 255
        needed_funds:
          nullable: true
          title: needed_funds
          description: needed_funds
          type: number
          format: float
          maxLength: 10
        collected_funds:
          nullable: true
          title: collected_funds
          description: collected_funds
          type: number
          format: float
          maxLength: 10
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
        program_id:
          nullable: true
          title: program_id
          description: program_id
          type: integer
          format: '-'
        category_id:
          nullable: true
          title: category_id
          description: category_id
          type: integer
          format: '-'
        donationtype_id:
          nullable: true
          title: donationtype_id
          description: donationtype_id
          type: integer
          format: '-'
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Bminfaqshodaqohcategory:
      title: Bminfaqshodaqohcategory
      description: Bminfaqshodaqohcategory
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 128
        label:
          nullable: false
          title: label
          description: label
          type: string
          format: '-'
          maxLength: 255
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Campaigns:
      title: Campaigns
      description: Campaigns
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        id_program:
          nullable: false
          title: id_program
          description: id_program
          type: integer
          format: '-'
          maxLength: 11
        status:
          nullable: true
          title: status
          description: status
          type: string
          format: '-'
          maxLength: 10
        is_active:
          nullable: true
          title: is_active
          description: is_active
          type: string
          format: '-'
          maxLength: 5
        is_delete:
          nullable: true
          title: is_delete
          description: is_delete
          type: string
          format: '-'
          maxLength: 5
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
        create_date:
          nullable: false
          title: create_date
          description: create_date
          type: string
          format: date
        modified_by:
          nullable: true
          title: modified_by
          description: modified_by
          type: integer
          format: '-'
          maxLength: 11
        modified_date:
          nullable: false
          title: modified_date
          description: modified_date
          type: string
          format: date
      type: object
    ChartOfAccount:
      title: ChartOfAccount
      description: ChartOfAccount
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        code:
          nullable: true
          title: code
          description: code
          type: string
          format: '-'
          maxLength: 10
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        group_account:
          nullable: false
          title: group_account
          description: group_account
          type: string
          format: '-'
          maxLength: 60
        entity_id:
          nullable: false
          title: entity_id
          description: entity_id
          type: integer
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Donasi:
      title: Donasi
      description: Donasi
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        id_donatur:
          nullable: false
          title: id_donatur
          description: id_donatur
          type: integer
          format: '-'
          maxLength: 11
        id_pembayaran:
          nullable: false
          title: id_pembayaran
          description: id_pembayaran
          type: integer
          format: '-'
          maxLength: 11
        id_program:
          nullable: false
          title: id_program
          description: id_program
          type: integer
          format: '-'
          maxLength: 11
        dana_in:
          nullable: false
          title: dana_in
          description: dana_in
          type: integer
          format: '-'
          maxLength: 2
        tgl_transaksi:
          nullable: false
          title: tgl_transaksi
          description: tgl_transaksi
          type: string
          format: date
        bukti_pembayaran:
          nullable: false
          title: bukti_pembayaran
          description: bukti_pembayaran
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Donatur:
      title: Donatur
      description: Donatur
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        donatur_type_id:
          nullable: false
          title: donatur_type_id
          description: donatur_type_id
          type: integer
          format: '-'
          maxLength: 11
        email:
          nullable: true
          title: email
          description: email
          type: string
          format: '-'
          maxLength: 50
        no_hp:
          nullable: true
          title: no_hp
          description: no_hp
          type: string
          format: '-'
          maxLength: 50
        alamat:
          nullable: true
          title: alamat
          description: alamat
          type: string
          format: '-'
          maxLength: 100
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    DonaturType:
      title: DonaturType
      description: DonaturType
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        type:
          nullable: false
          title: type
          description: type
          type: integer
          format: '-'
          maxLength: 11
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Entity:
      title: Entity
      description: Entity
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 50
        type:
          nullable: false
          title: type
          description: type
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Imam:
      title: Imam
      description: Imam
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        contact:
          nullable: true
          title: contact
          description: contact
          type: string
          format: '-'
          maxLength: 60
        address:
          nullable: true
          title: address
          description: address
          type: string
          format: '-'
          maxLength: 100
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
        is_permanent:
          nullable: false
          title: is_permanent
          description: is_permanent
          type: integer
          format: '-'
          maxLength: 1
        is_khotib:
          nullable: false
          title: is_khotib
          description: is_khotib
          type: integer
          format: '-'
          maxLength: 1
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Jabatan:
      title: Jabatan
      description: Jabatan
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
          maxLength: 255
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
      type: object
    KategoriPelajaran:
      title: KategoriPelajaran
      description: KategoriPelajaran
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
          maxLength: 255
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Kelas:
      title: Kelas
      description: Kelas
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
          maxLength: 255
        level:
          nullable: false
          title: level
          description: level
          type: string
          format: '-'
          maxLength: 255
        capacity:
          nullable: true
          title: capacity
          description: capacity
          type: integer
          format: '-'
          maxLength: 11
        duration:
          nullable: true
          title: duration
          description: duration
          type: integer
          format: '-'
          maxLength: 11
        uom_id:
          nullable: false
          title: uom_id
          description: uom_id
          type: integer
          format: '-'
          maxLength: 11
        entity_id:
          nullable: false
          title: entity_id
          description: entity_id
          type: integer
          format: '-'
          maxLength: 11
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Languages:
      title: Languages
      description: Languages
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        code:
          nullable: false
          title: code
          description: code
          type: string
          format: '-'
          maxLength: 255
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        path_icon:
          nullable: true
          title: path_icon
          description: path_icon
          type: string
          format: '-'
          maxLength: 255
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    MasterBank:
      title: MasterBank
      description: MasterBank
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        logo:
          nullable: true
          title: logo
          description: logo
          type: string
          format: '-'
        bank:
          nullable: true
          title: bank
          description: bank
          type: string
          format: '-'
          maxLength: 50
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    MasterEwallet:
      title: MasterEwallet
      description: MasterEwallet
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        logo:
          nullable: true
          title: logo
          description: logo
          type: string
          format: '-'
          maxLength: 255
        nama_ewallet:
          nullable: true
          title: nama_ewallet
          description: nama_ewallet
          type: string
          format: '-'
          maxLength: 100
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    MasterPaymentgateway:
      title: MasterPaymentgateway
      description: MasterPaymentgateway
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        logo:
          nullable: true
          title: logo
          description: logo
          type: string
          format: '-'
          maxLength: 255
        nama_paymentgateway:
          nullable: true
          title: nama_paymentgateway
          description: nama_paymentgateway
          type: string
          format: '-'
          maxLength: 100
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Materi:
      title: Materi
      description: Materi
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        bab_id:
          nullable: false
          title: bab_id
          description: bab_id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        duration:
          nullable: true
          title: duration
          description: duration
          type: integer
          format: '-'
          maxLength: 11
        uom_id:
          nullable: false
          title: uom_id
          description: uom_id
          type: integer
          format: '-'
          maxLength: 11
        sequence:
          nullable: true
          title: sequence
          description: sequence
          type: integer
          format: '-'
          maxLength: 11
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Member:
      title: Member
      description: Member
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        wilayah_id:
          nullable: false
          title: wilayah_id
          description: wilayah_id
          type: string
          format: '-'
          maxLength: 15
        code:
          nullable: false
          title: code
          description: code
          type: string
          format: '-'
          maxLength: 18
        address:
          nullable: false
          title: address
          description: address
          type: string
          format: '-'
          maxLength: 255
        email:
          nullable: false
          title: email
          description: email
          type: string
          format: '-'
          maxLength: 50
        telephone:
          nullable: false
          title: telephone
          description: telephone
          type: string
          format: '-'
          maxLength: 15
        path_logo:
          nullable: true
          title: path_logo
          description: path_logo
          type: string
          format: '-'
          maxLength: 255
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
      type: object
    NonRawatibSchedule:
      title: NonRawatibSchedule
      description: NonRawatibSchedule
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        type_sholat:
          nullable: false
          title: type_sholat
          description: type_sholat
          type: string
          format: '-'
          maxLength: 15
        name:
          nullable: true
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 50
        pray_date:
          nullable: false
          title: pray_date
          description: pray_date
          type: string
          format: date
        imam_id:
          nullable: false
          title: imam_id
          description: imam_id
          type: integer
          format: '-'
        khotib_id:
          nullable: true
          title: khotib_id
          description: khotib_id
          type: integer
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    NonRawatibScheduleClone:
      title: NonRawatibScheduleClone
      description: NonRawatibScheduleClone
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        type_sholat:
          nullable: false
          title: type_sholat
          description: type_sholat
          type: string
          format: '-'
          maxLength: 15
        name:
          nullable: true
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 50
        pray_date:
          nullable: false
          title: pray_date
          description: pray_date
          type: string
          format: date
        imam_id:
          nullable: false
          title: imam_id
          description: imam_id
          type: integer
          format: '-'
        khotib_id:
          nullable: true
          title: khotib_id
          description: khotib_id
          type: integer
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    PaymentCategory:
      title: PaymentCategory
      description: PaymentCategory
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 50
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    PaymentMethod:
      title: PaymentMethod
      description: PaymentMethod
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        id_bank:
          nullable: false
          title: id_bank
          description: id_bank
          type: integer
          format: '-'
          maxLength: 11
        no_rek:
          nullable: true
          title: no_rek
          description: no_rek
          type: integer
          format: '-'
          maxLength: 20
        nama_rek:
          nullable: true
          title: nama_rek
          description: nama_rek
          type: string
          format: '-'
          maxLength: 50
        payment_category_id:
          nullable: false
          title: payment_category_id
          description: payment_category_id
          type: integer
          format: '-'
          maxLength: 11
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Pelajaran:
      title: Pelajaran
      description: Pelajaran
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        class_id:
          nullable: false
          title: class_id
          description: class_id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        category_id:
          nullable: false
          title: category_id
          description: category_id
          type: integer
          format: '-'
          maxLength: 11
        duration:
          nullable: true
          title: duration
          description: duration
          type: integer
          format: '-'
          maxLength: 11
        uom_id:
          nullable: false
          title: uom_id
          description: uom_id
          type: integer
          format: '-'
          maxLength: 11
        sequence:
          nullable: true
          title: sequence
          description: sequence
          type: integer
          format: '-'
          maxLength: 11
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Pendaftaran:
      title: Pendaftaran
      description: Pendaftaran
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        class_id:
          nullable: false
          title: class_id
          description: class_id
          type: integer
          format: '-'
          maxLength: 11
        state:
          nullable: false
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
        nis:
          nullable: true
          title: nis
          description: nis
          type: integer
          format: '-'
          maxLength: 11
        nick_name:
          nullable: false
          title: nick_name
          description: nick_name
          type: string
          format: '-'
          maxLength: 60
        birth_date:
          nullable: false
          title: birth_date
          description: birth_date
          type: string
          format: date
        birth_place:
          nullable: true
          title: birth_place
          description: birth_place
          type: string
          format: '-'
          maxLength: 15
        gender:
          nullable: false
          title: gender
          description: gender
          type: string
          format: '-'
          maxLength: 20
        provinsi_id:
          nullable: true
          title: provinsi_id
          description: provinsi_id
          type: string
          format: '-'
          maxLength: 15
        kota_id:
          nullable: true
          title: kota_id
          description: kota_id
          type: string
          format: '-'
          maxLength: 15
        kecamatan_id:
          nullable: true
          title: kecamatan_id
          description: kecamatan_id
          type: string
          format: '-'
          maxLength: 15
        desa_id:
          nullable: true
          title: desa_id
          description: desa_id
          type: string
          format: '-'
          maxLength: 15
        address:
          nullable: true
          title: address
          description: address
          type: string
          format: '-'
          maxLength: 100
        school_origin:
          nullable: true
          title: school_origin
          description: school_origin
          type: string
          format: '-'
          maxLength: 100
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
        father_name:
          nullable: false
          title: father_name
          description: father_name
          type: string
          format: '-'
          maxLength: 60
        father_job:
          nullable: false
          title: father_job
          description: father_job
          type: string
          format: '-'
          maxLength: 60
        father_tlpn:
          nullable: true
          title: father_tlpn
          description: father_tlpn
          type: string
          format: '-'
          maxLength: 15
        father_email:
          nullable: true
          title: father_email
          description: father_email
          type: string
          format: '-'
          maxLength: 35
        mother_name:
          nullable: false
          title: mother_name
          description: mother_name
          type: string
          format: '-'
          maxLength: 60
        mother_job:
          nullable: false
          title: mother_job
          description: mother_job
          type: string
          format: '-'
          maxLength: 60
        mother_tlpn:
          nullable: true
          title: mother_tlpn
          description: mother_tlpn
          type: string
          format: '-'
          maxLength: 15
        mother_email:
          nullable: true
          title: mother_email
          description: mother_email
          type: string
          format: '-'
          maxLength: 35
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Pengurus:
      title: Pengurus
      description: Pengurus
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
        jabatan_id:
          nullable: false
          title: jabatan_id
          description: jabatan_id
          type: integer
          format: '-'
        address:
          nullable: true
          title: address
          description: address
          type: string
          format: '-'
          maxLength: 100
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        telephone:
          nullable: true
          title: telephone
          description: telephone
          type: string
          format: '-'
          maxLength: 15
        email:
          nullable: true
          title: email
          description: email
          type: string
          format: '-'
          maxLength: 35
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        provinsi_id:
          nullable: true
          title: provinsi_id
          description: provinsi_id
          type: string
          format: '-'
          maxLength: 15
        kota_id:
          nullable: true
          title: kota_id
          description: kota_id
          type: string
          format: '-'
          maxLength: 15
        kecamatan_id:
          nullable: true
          title: kecamatan_id
          description: kecamatan_id
          type: string
          format: '-'
          maxLength: 15
        desa_id:
          nullable: true
          title: desa_id
          description: desa_id
          type: string
          format: '-'
          maxLength: 15
        entity_id:
          nullable: true
          title: entity_id
          description: entity_id
          type: integer
          format: '-'
      type: object
    Profile:
      title: Profile
      description: Profile
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        wilayah_id:
          nullable: false
          title: wilayah_id
          description: wilayah_id
          type: string
          format: '-'
          maxLength: 15
        code:
          nullable: true
          title: code
          description: code
          type: string
          format: '-'
          maxLength: 18
        address:
          nullable: false
          title: address
          description: address
          type: string
          format: '-'
          maxLength: 255
        path_logo:
          nullable: true
          title: path_logo
          description: path_logo
          type: string
          format: '-'
          maxLength: 255
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        entity_id:
          nullable: false
          title: entity_id
          description: entity_id
          type: integer
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
      type: object
    Program:
      title: Program
      description: Program
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 50
        description:
          nullable: false
          title: description
          description: description
          type: string
          format: '-'
        start_date:
          nullable: false
          title: start_date
          description: start_date
          type: string
          format: date
        end_date:
          nullable: false
          title: end_date
          description: end_date
          type: string
          format: date
        state:
          nullable: false
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    ProgramCategory:
      title: ProgramCategory
      description: ProgramCategory
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 50
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
      type: object
    ProgramCost:
      title: ProgramCost
      description: ProgramCost
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        program_id:
          nullable: false
          title: program_id
          description: program_id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 150
        cost_estimate:
          nullable: false
          title: cost_estimate
          description: cost_estimate
          type: integer
          format: '-'
        cost_actual:
          nullable: true
          title: cost_actual
          description: cost_actual
          type: integer
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
      type: object
    RawatibSchedule:
      title: RawatibSchedule
      description: RawatibSchedule
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 15
        pray_time:
          nullable: false
          title: pray_time
          description: pray_time
          type: string
          format: '-'
        is_automatic:
          nullable: false
          title: is_automatic
          description: is_automatic
          type: integer
          format: '-'
          maxLength: 1
        imam_id:
          nullable: false
          title: imam_id
          description: imam_id
          type: integer
          format: '-'
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Sitemenus:
      title: Sitemenus
      description: Sitemenus
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 128
        label:
          nullable: false
          title: label
          description: label
          type: string
          format: '-'
          maxLength: 255
        parent:
          nullable: true
          title: parent
          description: parent
          type: integer
          format: '-'
        language_id:
          nullable: true
          title: language_id
          description: language_id
          type: integer
          format: '-'
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Sitepages:
      title: Sitepages
      description: Sitepages
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        title:
          nullable: false
          title: title
          description: title
          type: string
          format: '-'
          maxLength: 255
        subtitle:
          nullable: false
          title: subtitle
          description: subtitle
          type: string
          format: '-'
          maxLength: 255
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        content:
          nullable: false
          title: content
          description: content
          type: string
          format: '-'
        permalink:
          nullable: false
          title: permalink
          description: permalink
          type: string
          format: '-'
          maxLength: 255
        meta_title:
          nullable: false
          title: meta_title
          description: meta_title
          type: string
          format: '-'
          maxLength: 255
        meta_desc:
          nullable: false
          title: meta_desc
          description: meta_desc
          type: string
          format: '-'
        sitemenu_id:
          nullable: true
          title: sitemenu_id
          description: sitemenu_id
          type: integer
          format: '-'
        language_id:
          nullable: true
          title: language_id
          description: language_id
          type: integer
          format: '-'
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Siteposts:
      title: Siteposts
      description: Siteposts
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        title:
          nullable: false
          title: title
          description: title
          type: string
          format: '-'
          maxLength: 255
        subtitle:
          nullable: false
          title: subtitle
          description: subtitle
          type: string
          format: '-'
          maxLength: 255
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        content:
          nullable: false
          title: content
          description: content
          type: string
          format: '-'
        permalink:
          nullable: false
          title: permalink
          description: permalink
          type: string
          format: '-'
          maxLength: 255
        meta_title:
          nullable: false
          title: meta_title
          description: meta_title
          type: string
          format: '-'
          maxLength: 255
        meta_desc:
          nullable: false
          title: meta_desc
          description: meta_desc
          type: string
          format: '-'
        labels:
          nullable: false
          title: labels
          description: labels
          type: string
          format: '-'
        language_id:
          nullable: true
          title: language_id
          description: language_id
          type: integer
          format: '-'
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Sitesections:
      title: Sitesections
      description: Sitesections
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        title:
          nullable: false
          title: title
          description: title
          type: string
          format: '-'
          maxLength: 255
        subtitle:
          nullable: false
          title: subtitle
          description: subtitle
          type: string
          format: '-'
          maxLength: 255
        content:
          nullable: false
          title: content
          description: content
          type: string
          format: '-'
        sequence:
          nullable: true
          title: sequence
          description: sequence
          type: integer
          format: '-'
        sitepage_id:
          nullable: true
          title: sitepage_id
          description: sitepage_id
          type: integer
          format: '-'
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Sitesliders:
      title: Sitesliders
      description: Sitesliders
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        path_image:
          nullable: true
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
        content:
          nullable: false
          title: content
          description: content
          type: string
          format: '-'
        sequence:
          nullable: true
          title: sequence
          description: sequence
          type: integer
          format: '-'
        sitepage_id:
          nullable: true
          title: sitepage_id
          description: sitepage_id
          type: integer
          format: '-'
        language_id:
          nullable: true
          title: language_id
          description: language_id
          type: integer
          format: '-'
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Sitesocials:
      title: Sitesocials
      description: Sitesocials
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        link:
          nullable: false
          title: link
          description: link
          type: string
          format: '-'
          maxLength: 255
        path_icon:
          nullable: true
          title: path_icon
          description: path_icon
          type: string
          format: '-'
          maxLength: 255
        state:
          nullable: true
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
      type: object
    Uom:
      title: Uom
      description: Uom
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        code:
          nullable: true
          title: code
          description: code
          type: string
          format: '-'
          maxLength: 255
        type:
          nullable: true
          title: type
          description: type
          type: string
          format: '-'
          maxLength: 255
        ratio:
          nullable: true
          title: ratio
          description: ratio
          type: number
          format: float
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        uomcategory_id:
          nullable: true
          title: uomcategory_id
          description: uomcategory_id
          type: integer
          format: '-'
          maxLength: 11
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    UomCategory:
      title: UomCategory
      description: UomCategory
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
          maxLength: 11
        name:
          nullable: false
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
        description:
          nullable: true
          title: description
          description: description
          type: string
          format: '-'
          maxLength: 255
        created_at:
          nullable: false
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: false
          title: updated_at
          description: updated_at
          type: string
          format: date
        created_by:
          nullable: true
          title: created_by
          description: created_by
          type: integer
          format: '-'
          maxLength: 11
      type: object
    Users:
      title: Users
      description: Users
      properties:
        id:
          nullable: false
          title: id
          description: id
          type: integer
          format: '-'
        username:
          nullable: true
          title: username
          description: username
          type: string
          format: '-'
          maxLength: 30
        first_name:
          nullable: true
          title: first_name
          description: first_name
          type: string
          format: '-'
          maxLength: 255
        last_name:
          nullable: true
          title: last_name
          description: last_name
          type: string
          format: '-'
          maxLength: 255
        avatar:
          nullable: true
          title: avatar
          description: avatar
          type: string
          format: '-'
          maxLength: 255
        status:
          nullable: true
          title: status
          description: status
          type: string
          format: '-'
          maxLength: 255
        status_message:
          nullable: true
          title: status_message
          description: status_message
          type: string
          format: '-'
          maxLength: 255
        active:
          nullable: false
          title: active
          description: active
          type: integer
          format: '-'
          maxLength: 1
        permissions:
          nullable: true
          title: permissions
          description: permissions
          type: string
          format: '-'
        last_active:
          nullable: true
          title: last_active
          description: last_active
          type: string
          format: date
        created_at:
          nullable: true
          title: created_at
          description: created_at
          type: string
          format: date
        updated_at:
          nullable: true
          title: updated_at
          description: updated_at
          type: string
          format: date
        deleted_at:
          nullable: true
          title: deleted_at
          description: deleted_at
          type: string
          format: date
      type: object
    Wilayah:
      title: Wilayah
      description: Wilayah
      properties:
        kode:
          nullable: false
          title: kode
          description: kode
          type: string
          format: '-'
          maxLength: 15
        nama:
          nullable: false
          title: nama
          description: nama
          type: string
          format: '-'
          maxLength: 70
        level:
          nullable: false
          title: level
          description: level
          type: string
          format: '-'
      type: object
  requestBodies:
    AccountBalance:
      description: 'AccountBalance object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/AccountBalance'
        application/xml:
          schema:
            $ref: '#/components/schemas/AccountBalance'
        application/json:
          schema:
            $ref: '#/components/schemas/AccountBalance'
    Bab:
      description: 'Bab object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Bab'
        application/xml:
          schema:
            $ref: '#/components/schemas/Bab'
        application/json:
          schema:
            $ref: '#/components/schemas/Bab'
    Balance:
      description: 'Balance object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Balance'
        application/xml:
          schema:
            $ref: '#/components/schemas/Balance'
        application/json:
          schema:
            $ref: '#/components/schemas/Balance'
    Bmdonationcampaign:
      description: 'Bmdonationcampaign object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Bmdonationcampaign'
        application/xml:
          schema:
            $ref: '#/components/schemas/Bmdonationcampaign'
        application/json:
          schema:
            $ref: '#/components/schemas/Bmdonationcampaign'
    Bmdonationcampaigncategory:
      description: 'Bmdonationcampaigncategory object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Bmdonationcampaigncategory'
        application/xml:
          schema:
            $ref: '#/components/schemas/Bmdonationcampaigncategory'
        application/json:
          schema:
            $ref: '#/components/schemas/Bmdonationcampaigncategory'
    Bmdonationtype:
      description: 'Bmdonationtype object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Bmdonationtype'
        application/xml:
          schema:
            $ref: '#/components/schemas/Bmdonationtype'
        application/json:
          schema:
            $ref: '#/components/schemas/Bmdonationtype'
    Bminfaqshodaqoh:
      description: 'Bminfaqshodaqoh object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Bminfaqshodaqoh'
        application/xml:
          schema:
            $ref: '#/components/schemas/Bminfaqshodaqoh'
        application/json:
          schema:
            $ref: '#/components/schemas/Bminfaqshodaqoh'
    Bminfaqshodaqohcategory:
      description: 'Bminfaqshodaqohcategory object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Bminfaqshodaqohcategory'
        application/xml:
          schema:
            $ref: '#/components/schemas/Bminfaqshodaqohcategory'
        application/json:
          schema:
            $ref: '#/components/schemas/Bminfaqshodaqohcategory'
    Campaigns:
      description: 'Campaigns object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Campaigns'
        application/xml:
          schema:
            $ref: '#/components/schemas/Campaigns'
        application/json:
          schema:
            $ref: '#/components/schemas/Campaigns'
    ChartOfAccount:
      description: 'ChartOfAccount object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/ChartOfAccount'
        application/xml:
          schema:
            $ref: '#/components/schemas/ChartOfAccount'
        application/json:
          schema:
            $ref: '#/components/schemas/ChartOfAccount'
    Donasi:
      description: 'Donasi object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Donasi'
        application/xml:
          schema:
            $ref: '#/components/schemas/Donasi'
        application/json:
          schema:
            $ref: '#/components/schemas/Donasi'
    Donatur:
      description: 'Donatur object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Donatur'
        application/xml:
          schema:
            $ref: '#/components/schemas/Donatur'
        application/json:
          schema:
            $ref: '#/components/schemas/Donatur'
    DonaturType:
      description: 'DonaturType object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/DonaturType'
        application/xml:
          schema:
            $ref: '#/components/schemas/DonaturType'
        application/json:
          schema:
            $ref: '#/components/schemas/DonaturType'
    Entity:
      description: 'Entity object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Entity'
        application/xml:
          schema:
            $ref: '#/components/schemas/Entity'
        application/json:
          schema:
            $ref: '#/components/schemas/Entity'
    Imam:
      description: 'Imam object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Imam'
        application/xml:
          schema:
            $ref: '#/components/schemas/Imam'
        application/json:
          schema:
            $ref: '#/components/schemas/Imam'
    Jabatan:
      description: 'Jabatan object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Jabatan'
        application/xml:
          schema:
            $ref: '#/components/schemas/Jabatan'
        application/json:
          schema:
            $ref: '#/components/schemas/Jabatan'
    KategoriPelajaran:
      description: 'KategoriPelajaran object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/KategoriPelajaran'
        application/xml:
          schema:
            $ref: '#/components/schemas/KategoriPelajaran'
        application/json:
          schema:
            $ref: '#/components/schemas/KategoriPelajaran'
    Kelas:
      description: 'Kelas object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Kelas'
        application/xml:
          schema:
            $ref: '#/components/schemas/Kelas'
        application/json:
          schema:
            $ref: '#/components/schemas/Kelas'
    Languages:
      description: 'Languages object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Languages'
        application/xml:
          schema:
            $ref: '#/components/schemas/Languages'
        application/json:
          schema:
            $ref: '#/components/schemas/Languages'
    MasterBank:
      description: 'MasterBank object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/MasterBank'
        application/xml:
          schema:
            $ref: '#/components/schemas/MasterBank'
        application/json:
          schema:
            $ref: '#/components/schemas/MasterBank'
    MasterEwallet:
      description: 'MasterEwallet object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/MasterEwallet'
        application/xml:
          schema:
            $ref: '#/components/schemas/MasterEwallet'
        application/json:
          schema:
            $ref: '#/components/schemas/MasterEwallet'
    MasterPaymentgateway:
      description: 'MasterPaymentgateway object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/MasterPaymentgateway'
        application/xml:
          schema:
            $ref: '#/components/schemas/MasterPaymentgateway'
        application/json:
          schema:
            $ref: '#/components/schemas/MasterPaymentgateway'
    Materi:
      description: 'Materi object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Materi'
        application/xml:
          schema:
            $ref: '#/components/schemas/Materi'
        application/json:
          schema:
            $ref: '#/components/schemas/Materi'
    Member:
      description: 'Member object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Member'
        application/xml:
          schema:
            $ref: '#/components/schemas/Member'
        application/json:
          schema:
            $ref: '#/components/schemas/Member'
    NonRawatibSchedule:
      description: 'NonRawatibSchedule object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/NonRawatibSchedule'
        application/xml:
          schema:
            $ref: '#/components/schemas/NonRawatibSchedule'
        application/json:
          schema:
            $ref: '#/components/schemas/NonRawatibSchedule'
    NonRawatibScheduleClone:
      description: 'NonRawatibScheduleClone object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/NonRawatibScheduleClone'
        application/xml:
          schema:
            $ref: '#/components/schemas/NonRawatibScheduleClone'
        application/json:
          schema:
            $ref: '#/components/schemas/NonRawatibScheduleClone'
    PaymentCategory:
      description: 'PaymentCategory object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/PaymentCategory'
        application/xml:
          schema:
            $ref: '#/components/schemas/PaymentCategory'
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentCategory'
    PaymentMethod:
      description: 'PaymentMethod object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
        application/xml:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
    Pelajaran:
      description: 'Pelajaran object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Pelajaran'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pelajaran'
        application/json:
          schema:
            $ref: '#/components/schemas/Pelajaran'
    Pendaftaran:
      description: 'Pendaftaran object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Pendaftaran'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pendaftaran'
        application/json:
          schema:
            $ref: '#/components/schemas/Pendaftaran'
    Pengurus:
      description: 'Pengurus object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Pengurus'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pengurus'
        application/json:
          schema:
            $ref: '#/components/schemas/Pengurus'
    Profile:
      description: 'Profile object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Profile'
        application/xml:
          schema:
            $ref: '#/components/schemas/Profile'
        application/json:
          schema:
            $ref: '#/components/schemas/Profile'
    Program:
      description: 'Program object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Program'
        application/xml:
          schema:
            $ref: '#/components/schemas/Program'
        application/json:
          schema:
            $ref: '#/components/schemas/Program'
    ProgramCategory:
      description: 'ProgramCategory object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/ProgramCategory'
        application/xml:
          schema:
            $ref: '#/components/schemas/ProgramCategory'
        application/json:
          schema:
            $ref: '#/components/schemas/ProgramCategory'
    ProgramCost:
      description: 'ProgramCost object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/ProgramCost'
        application/xml:
          schema:
            $ref: '#/components/schemas/ProgramCost'
        application/json:
          schema:
            $ref: '#/components/schemas/ProgramCost'
    RawatibSchedule:
      description: 'RawatibSchedule object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/RawatibSchedule'
        application/xml:
          schema:
            $ref: '#/components/schemas/RawatibSchedule'
        application/json:
          schema:
            $ref: '#/components/schemas/RawatibSchedule'
    Sitemenus:
      description: 'Sitemenus object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitemenus'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitemenus'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitemenus'
    Sitepages:
      description: 'Sitepages object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitepages'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitepages'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitepages'
    Siteposts:
      description: 'Siteposts object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Siteposts'
        application/xml:
          schema:
            $ref: '#/components/schemas/Siteposts'
        application/json:
          schema:
            $ref: '#/components/schemas/Siteposts'
    Sitesections:
      description: 'Sitesections object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitesections'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitesections'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitesections'
    Sitesliders:
      description: 'Sitesliders object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitesliders'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitesliders'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitesliders'
    Sitesocials:
      description: 'Sitesocials object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitesocials'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitesocials'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitesocials'
    Uom:
      description: 'Uom object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Uom'
        application/xml:
          schema:
            $ref: '#/components/schemas/Uom'
        application/json:
          schema:
            $ref: '#/components/schemas/Uom'
    UomCategory:
      description: 'UomCategory object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/UomCategory'
        application/xml:
          schema:
            $ref: '#/components/schemas/UomCategory'
        application/json:
          schema:
            $ref: '#/components/schemas/UomCategory'
    Users:
      description: 'Users object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Users'
        application/xml:
          schema:
            $ref: '#/components/schemas/Users'
        application/json:
          schema:
            $ref: '#/components/schemas/Users'
    Wilayah:
      description: 'Wilayah object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Wilayah'
        application/xml:
          schema:
            $ref: '#/components/schemas/Wilayah'
        application/json:
          schema:
            $ref: '#/components/schemas/Wilayah'
  securitySchemes:
    bearer_auth:
      type: http
      description: 'Login with email and password to get the authentication token'
      name: 'Token based Based'
      in: header
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: AccountBalance
    description: 'Everything about your AccountBalance'
  -
    name: Bab
    description: 'Everything about your Bab'
  -
    name: Balance
    description: 'Everything about your Balance'
  -
    name: Bmdonationcampaign
    description: 'Everything about your Bmdonationcampaign'
  -
    name: Bmdonationcampaigncategory
    description: 'Everything about your Bmdonationcampaigncategory'
  -
    name: Bmdonationtype
    description: 'Everything about your Bmdonationtype'
  -
    name: Bminfaqshodaqoh
    description: 'Everything about your Bminfaqshodaqoh'
  -
    name: Bminfaqshodaqohcategory
    description: 'Everything about your Bminfaqshodaqohcategory'
  -
    name: Campaigns
    description: 'Everything about your Campaigns'
  -
    name: ChartOfAccount
    description: 'Everything about your ChartOfAccount'
  -
    name: Donasi
    description: 'Everything about your Donasi'
  -
    name: Donatur
    description: 'Everything about your Donatur'
  -
    name: DonaturType
    description: 'Everything about your DonaturType'
  -
    name: Entity
    description: 'Everything about your Entity'
  -
    name: Imam
    description: 'Everything about your Imam'
  -
    name: Jabatan
    description: 'Everything about your Jabatan'
  -
    name: KategoriPelajaran
    description: 'Everything about your KategoriPelajaran'
  -
    name: Kelas
    description: 'Everything about your Kelas'
  -
    name: Languages
    description: 'Everything about your Languages'
  -
    name: MasterBank
    description: 'Everything about your MasterBank'
  -
    name: MasterEwallet
    description: 'Everything about your MasterEwallet'
  -
    name: MasterPaymentgateway
    description: 'Everything about your MasterPaymentgateway'
  -
    name: Materi
    description: 'Everything about your Materi'
  -
    name: Member
    description: 'Everything about your Member'
  -
    name: NonRawatibSchedule
    description: 'Everything about your NonRawatibSchedule'
  -
    name: NonRawatibScheduleClone
    description: 'Everything about your NonRawatibScheduleClone'
  -
    name: PaymentCategory
    description: 'Everything about your PaymentCategory'
  -
    name: PaymentMethod
    description: 'Everything about your PaymentMethod'
  -
    name: Pelajaran
    description: 'Everything about your Pelajaran'
  -
    name: Pendaftaran
    description: 'Everything about your Pendaftaran'
  -
    name: Pengurus
    description: 'Everything about your Pengurus'
  -
    name: Profile
    description: 'Everything about your Profile'
  -
    name: Program
    description: 'Everything about your Program'
  -
    name: ProgramCategory
    description: 'Everything about your ProgramCategory'
  -
    name: ProgramCost
    description: 'Everything about your ProgramCost'
  -
    name: RawatibSchedule
    description: 'Everything about your RawatibSchedule'
  -
    name: Sitemenus
    description: 'Everything about your Sitemenus'
  -
    name: Sitepages
    description: 'Everything about your Sitepages'
  -
    name: Siteposts
    description: 'Everything about your Siteposts'
  -
    name: Sitesections
    description: 'Everything about your Sitesections'
  -
    name: Sitesliders
    description: 'Everything about your Sitesliders'
  -
    name: Sitesocials
    description: 'Everything about your Sitesocials'
  -
    name: Uom
    description: 'Everything about your Uom'
  -
    name: UomCategory
    description: 'Everything about your UomCategory'
  -
    name: Users
    description: 'Everything about your Users'
  -
    name: Wilayah
    description: 'Everything about your Wilayah'
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
