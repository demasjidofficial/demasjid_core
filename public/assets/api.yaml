openapi: 3.0.0
info:
  title: 'swagger easycrud-ci4'
  description: 'This is a sample server easycrud-ci4'
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  -
    url: /api
    description: 'OpenApi host'
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: 'login page to authenticate user'
      operationId: userLogin
      requestBody:
        description: 'Login user'
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              type: object
      responses:
        '200':
          description: 'Login successed'
          content:
            application/json:
              schema: {  }
            application/xml:
              schema: {  }
        '400':
          description: 'Invalid email/password supplied'
  /auth/register:
    post:
      tags:
        - Authentication
      summary: 'register page to new user'
      operationId: userRegister
      requestBody:
        description: 'Login user'
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                pass_confirm:
                  type: string
              type: object
      responses:
        '200':
          description: 'Login successed'
          content:
            application/json:
              schema: {  }
            application/xml:
              schema: {  }
        '400':
          description: 'Invalid username/password supplied'
  /jabatans:
    get:
      tags:
        - Jabatan
      summary: 'Find list Jabatan'
      description: 'Returns list of Jabatan'
      operationId: getJabatan
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Jabatan' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Jabatan' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Jabatan' } }
                type: object
        '404':
          description: 'Jabatan not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Jabatan
      summary: 'Add a new Jabatan to the store'
      operationId: addJabatan
      requestBody:
        $ref: '#/components/requestBodies/Jabatan'
      responses:
        '201':
          description: 'Created Jabatan'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jabatan'
            application/xml:
              schema:
                $ref: '#/components/schemas/Jabatan'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/jabatans/{id}':
    get:
      tags:
        - Jabatan
      summary: 'Find Jabatan by ID'
      description: 'Returns a single Jabatan'
      operationId: getJabatanById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Jabatan to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jabatan'
            application/xml:
              schema:
                $ref: '#/components/schemas/Jabatan'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Jabatan not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Jabatan
      summary: 'Update an existing Jabatan'
      operationId: updateJabatan
      parameters:
        -
          name: id
          in: path
          description: 'Jabatan id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Jabatan'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Jabatan not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Jabatan
      summary: 'Deletes a Jabatan'
      operationId: deleteJabatan
      parameters:
        -
          name: id
          in: path
          description: 'Jabatan id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /members:
    get:
      tags:
        - Member
      summary: 'Find list Member'
      description: 'Returns list of Member'
      operationId: getMember
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Member' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Member' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Member' } }
                type: object
        '404':
          description: 'Member not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Member
      summary: 'Add a new Member to the store'
      operationId: addMember
      requestBody:
        $ref: '#/components/requestBodies/Member'
      responses:
        '201':
          description: 'Created Member'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
            application/xml:
              schema:
                $ref: '#/components/schemas/Member'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/members/{id}':
    get:
      tags:
        - Member
      summary: 'Find Member by ID'
      description: 'Returns a single Member'
      operationId: getMemberById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Member to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
            application/xml:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Member not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Member
      summary: 'Update an existing Member'
      operationId: updateMember
      parameters:
        -
          name: id
          in: path
          description: 'Member id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Member'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Member not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Member
      summary: 'Deletes a Member'
      operationId: deleteMember
      parameters:
        -
          name: id
          in: path
          description: 'Member id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /pengurus:
    get:
      tags:
        - Pengurus
      summary: 'Find list Pengurus'
      description: 'Returns list of Pengurus'
      operationId: getPengurus
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Pengurus' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Pengurus' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Pengurus' } }
                type: object
        '404':
          description: 'Pengurus not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Pengurus
      summary: 'Add a new Pengurus to the store'
      operationId: addPengurus
      requestBody:
        $ref: '#/components/requestBodies/Pengurus'
      responses:
        '201':
          description: 'Created Pengurus'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pengurus'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pengurus'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/pengurus/{id}':
    get:
      tags:
        - Pengurus
      summary: 'Find Pengurus by ID'
      description: 'Returns a single Pengurus'
      operationId: getPengurusById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Pengurus to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pengurus'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pengurus'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Pengurus not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Pengurus
      summary: 'Update an existing Pengurus'
      operationId: updatePengurus
      parameters:
        -
          name: id
          in: path
          description: 'Pengurus id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Pengurus'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pengurus not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Pengurus
      summary: 'Deletes a Pengurus'
      operationId: deletePengurus
      parameters:
        -
          name: id
          in: path
          description: 'Pengurus id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitemenus:
    get:
      tags:
        - Sitemenus
      summary: 'Find list Sitemenus'
      description: 'Returns list of Sitemenus'
      operationId: getSitemenus
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitemenus' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitemenus' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitemenus' } }
                type: object
        '404':
          description: 'Sitemenus not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitemenus
      summary: 'Add a new Sitemenus to the store'
      operationId: addSitemenus
      requestBody:
        $ref: '#/components/requestBodies/Sitemenus'
      responses:
        '201':
          description: 'Created Sitemenus'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitemenus'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitemenus'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitemenus/{id}':
    get:
      tags:
        - Sitemenus
      summary: 'Find Sitemenus by ID'
      description: 'Returns a single Sitemenus'
      operationId: getSitemenusById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitemenus to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitemenus'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitemenus'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitemenus not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitemenus
      summary: 'Update an existing Sitemenus'
      operationId: updateSitemenus
      parameters:
        -
          name: id
          in: path
          description: 'Sitemenus id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitemenus'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitemenus not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitemenus
      summary: 'Deletes a Sitemenus'
      operationId: deleteSitemenus
      parameters:
        -
          name: id
          in: path
          description: 'Sitemenus id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitepages:
    get:
      tags:
        - Sitepages
      summary: 'Find list Sitepages'
      description: 'Returns list of Sitepages'
      operationId: getSitepages
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitepages' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitepages' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitepages' } }
                type: object
        '404':
          description: 'Sitepages not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitepages
      summary: 'Add a new Sitepages to the store'
      operationId: addSitepages
      requestBody:
        $ref: '#/components/requestBodies/Sitepages'
      responses:
        '201':
          description: 'Created Sitepages'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitepages'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitepages'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitepages/{id}':
    get:
      tags:
        - Sitepages
      summary: 'Find Sitepages by ID'
      description: 'Returns a single Sitepages'
      operationId: getSitepagesById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitepages to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitepages'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitepages'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitepages not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitepages
      summary: 'Update an existing Sitepages'
      operationId: updateSitepages
      parameters:
        -
          name: id
          in: path
          description: 'Sitepages id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitepages'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitepages not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitepages
      summary: 'Deletes a Sitepages'
      operationId: deleteSitepages
      parameters:
        -
          name: id
          in: path
          description: 'Sitepages id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /siteposts:
    get:
      tags:
        - Siteposts
      summary: 'Find list Siteposts'
      description: 'Returns list of Siteposts'
      operationId: getSiteposts
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Siteposts' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Siteposts' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Siteposts' } }
                type: object
        '404':
          description: 'Siteposts not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Siteposts
      summary: 'Add a new Siteposts to the store'
      operationId: addSiteposts
      requestBody:
        $ref: '#/components/requestBodies/Siteposts'
      responses:
        '201':
          description: 'Created Siteposts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Siteposts'
            application/xml:
              schema:
                $ref: '#/components/schemas/Siteposts'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/siteposts/{id}':
    get:
      tags:
        - Siteposts
      summary: 'Find Siteposts by ID'
      description: 'Returns a single Siteposts'
      operationId: getSitepostsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Siteposts to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Siteposts'
            application/xml:
              schema:
                $ref: '#/components/schemas/Siteposts'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Siteposts not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Siteposts
      summary: 'Update an existing Siteposts'
      operationId: updateSiteposts
      parameters:
        -
          name: id
          in: path
          description: 'Siteposts id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Siteposts'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Siteposts not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Siteposts
      summary: 'Deletes a Siteposts'
      operationId: deleteSiteposts
      parameters:
        -
          name: id
          in: path
          description: 'Siteposts id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitesections:
    get:
      tags:
        - Sitesections
      summary: 'Find list Sitesections'
      description: 'Returns list of Sitesections'
      operationId: getSitesections
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesections' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesections' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitesections' } }
                type: object
        '404':
          description: 'Sitesections not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitesections
      summary: 'Add a new Sitesections to the store'
      operationId: addSitesections
      requestBody:
        $ref: '#/components/requestBodies/Sitesections'
      responses:
        '201':
          description: 'Created Sitesections'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesections'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesections'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitesections/{id}':
    get:
      tags:
        - Sitesections
      summary: 'Find Sitesections by ID'
      description: 'Returns a single Sitesections'
      operationId: getSitesectionsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitesections to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesections'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesections'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitesections not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitesections
      summary: 'Update an existing Sitesections'
      operationId: updateSitesections
      parameters:
        -
          name: id
          in: path
          description: 'Sitesections id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitesections'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitesections not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitesections
      summary: 'Deletes a Sitesections'
      operationId: deleteSitesections
      parameters:
        -
          name: id
          in: path
          description: 'Sitesections id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /sitesocials:
    get:
      tags:
        - Sitesocials
      summary: 'Find list Sitesocials'
      description: 'Returns list of Sitesocials'
      operationId: getSitesocials
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesocials' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Sitesocials' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Sitesocials' } }
                type: object
        '404':
          description: 'Sitesocials not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Sitesocials
      summary: 'Add a new Sitesocials to the store'
      operationId: addSitesocials
      requestBody:
        $ref: '#/components/requestBodies/Sitesocials'
      responses:
        '201':
          description: 'Created Sitesocials'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesocials'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesocials'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/sitesocials/{id}':
    get:
      tags:
        - Sitesocials
      summary: 'Find Sitesocials by ID'
      description: 'Returns a single Sitesocials'
      operationId: getSitesocialsById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Sitesocials to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sitesocials'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sitesocials'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Sitesocials not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Sitesocials
      summary: 'Update an existing Sitesocials'
      operationId: updateSitesocials
      parameters:
        -
          name: id
          in: path
          description: 'Sitesocials id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Sitesocials'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Sitesocials not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Sitesocials
      summary: 'Deletes a Sitesocials'
      operationId: deleteSitesocials
      parameters:
        -
          name: id
          in: path
          description: 'Sitesocials id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /users:
    get:
      tags:
        - Users
      summary: 'Find list Users'
      description: 'Returns list of Users'
      operationId: getUsers
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Users' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Users' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Users' } }
                type: object
        '404':
          description: 'Users not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Users
      summary: 'Add a new Users to the store'
      operationId: addUsers
      requestBody:
        $ref: '#/components/requestBodies/Users'
      responses:
        '201':
          description: 'Created Users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/users/{id}':
    get:
      tags:
        - Users
      summary: 'Find Users by ID'
      description: 'Returns a single Users'
      operationId: getUsersById
      parameters:
        -
          name: id
          in: path
          description: 'ID of Users to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: 'Invalid ID supplier'
        '404':
          description: 'Users not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Users
      summary: 'Update an existing Users'
      operationId: updateUsers
      parameters:
        -
          name: id
          in: path
          description: 'Users id to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Users'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Users not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Users
      summary: 'Deletes a Users'
      operationId: deleteUsers
      parameters:
        -
          name: id
          in: path
          description: 'Users id to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
  /wilayahs:
    get:
      tags:
        - Wilayah
      summary: 'Find list Wilayah'
      description: 'Returns list of Wilayah'
      operationId: getWilayah
      parameters:
        -
          name: search
          in: query
          description: 'search by column defined'
          schema:
            type: object
        -
          name: order
          in: query
          description: 'order by column defined'
          schema:
            type: object
        -
          name: page
          in: query
          description: 'page to show'
          schema:
            type: int32
        -
          name: limit
          in: query
          description: 'count data display per page'
          schema:
            type: int32
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Wilayah' } }
                  pagination: { properties: { currentPage: { type: integer }, totalPage: { type: integer } }, type: object }
                type: object
            application/xml:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Wilayah' } }
                  pagination: { type: array, items: { $ref: '#/components/schemas/Wilayah' } }
                type: object
        '404':
          description: 'Wilayah not found'
      security:
        -
          bearer_auth: []
    post:
      tags:
        - Wilayah
      summary: 'Add a new Wilayah to the store'
      operationId: addWilayah
      requestBody:
        $ref: '#/components/requestBodies/Wilayah'
      responses:
        '201':
          description: 'Created Wilayah'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wilayah'
            application/xml:
              schema:
                $ref: '#/components/schemas/Wilayah'
        '405':
          description: 'Invalid input'
      security:
        -
          bearer_auth: []
  '/wilayahs/{kode}':
    get:
      tags:
        - Wilayah
      summary: 'Find Wilayah by kode'
      description: 'Returns a single Wilayah'
      operationId: getWilayahById
      parameters:
        -
          name: kode
          in: path
          description: 'Kode of Wilayah to return'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wilayah'
            application/xml:
              schema:
                $ref: '#/components/schemas/Wilayah'
        '400':
          description: 'Invalid Kode wilayah'
        '404':
          description: 'Wilayah not found'
      security:
        -
          bearer_auth: []
    put:
      tags:
        - Wilayah
      summary: 'Update an existing Wilayah'
      operationId: updateWilayah
      parameters:
        -
          name: kode
          in: path
          description: 'Wilayah kode to update'
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Wilayah'
      responses:
        '400':
          description: 'Invalid Kode supplied'
        '404':
          description: 'Wilayah not found'
        '405':
          description: 'Validation exception'
      security:
        -
          bearer_auth: []
    delete:
      tags:
        - Wilayah
      summary: 'Deletes a Wilayah'
      operationId: deleteWilayah
      parameters:
        -
          name: kode
          in: path
          description: 'Wilayah kode to delete'
          required: true
          schema:
            type: string
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Pet not found'
      security:
        -
          bearer_auth: []
components:
  schemas:
    Jabatan:
      title: Jabatan
      description: Jabatan
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        name:
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 60
          nullable: false
        description:
          title: description
          description: description
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: false
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: false
      type: object
    Member:
      title: Member
      description: Member
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        name:
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        wilayah_id:
          title: wilayah_id
          description: wilayah_id
          type: string
          format: '-'
          maxLength: 15
          nullable: false
        code:
          title: code
          description: code
          type: string
          format: '-'
          maxLength: 18
          nullable: false
        address:
          title: address
          description: address
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        email:
          title: email
          description: email
          type: string
          format: '-'
          maxLength: 50
          nullable: false
        telephone:
          title: telephone
          description: telephone
          type: string
          format: '-'
          maxLength: 15
          nullable: false
        path_logo:
          title: path_logo
          description: path_logo
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        path_image:
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        state:
          title: state
          description: state
          type: string
          format: '-'
          nullable: true
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: false
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: false
      type: object
    Pengurus:
      title: Pengurus
      description: Pengurus
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        name:
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        contact:
          title: contact
          description: contact
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        description:
          title: description
          description: description
          type: string
          format: '-'
          nullable: false
        jabatan_id:
          title: jabatan_id
          description: jabatan_id
          type: integer
          format: '-'
          nullable: false
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: false
        '':
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: false
      type: object
    Sitemenus:
      title: Sitemenus
      description: Sitemenus
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        name:
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 128
          nullable: false
        label:
          title: label
          description: label
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        parent:
          title: parent
          description: parent
          type: integer
          format: '-'
          nullable: true
        language_id:
          title: language_id
          description: language_id
          type: integer
          format: '-'
          nullable: true
        state:
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
          nullable: true
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: false
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: false
        created_by:
          title: created_by
          description: created_by
          type: integer
          format: '-'
          nullable: true
      type: object
    Sitepages:
      title: Sitepages
      description: Sitepages
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        title:
          title: title
          description: title
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        subtitle:
          title: subtitle
          description: subtitle
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        path_image:
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        content:
          title: content
          description: content
          type: string
          format: '-'
          nullable: false
        permalink:
          title: permalink
          description: permalink
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        meta_title:
          title: meta_title
          description: meta_title
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        meta_desc:
          title: meta_desc
          description: meta_desc
          type: string
          format: '-'
          nullable: false
        sitemenu_id:
          title: sitemenu_id
          description: sitemenu_id
          type: integer
          format: '-'
          nullable: true
        language_id:
          title: language_id
          description: language_id
          type: integer
          format: '-'
          nullable: true
        state:
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
          nullable: true
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: false
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: false
        created_by:
          title: created_by
          description: created_by
          type: integer
          format: '-'
          nullable: true
      type: object
    Siteposts:
      title: Siteposts
      description: Siteposts
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        title:
          title: title
          description: title
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        subtitle:
          title: subtitle
          description: subtitle
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        path_image:
          title: path_image
          description: path_image
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        content:
          title: content
          description: content
          type: string
          format: '-'
          nullable: false
        permalink:
          title: permalink
          description: permalink
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        meta_title:
          title: meta_title
          description: meta_title
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        meta_desc:
          title: meta_desc
          description: meta_desc
          type: string
          format: '-'
          nullable: false
        labels:
          title: labels
          description: labels
          type: string
          format: '-'
          nullable: false
        language_id:
          title: language_id
          description: language_id
          type: integer
          format: '-'
          nullable: true
        state:
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
          nullable: true
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: false
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: false
        created_by:
          title: created_by
          description: created_by
          type: integer
          format: '-'
          nullable: true
      type: object
    Sitesections:
      title: Sitesections
      description: Sitesections
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        title:
          title: title
          description: title
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        subtitle:
          title: subtitle
          description: subtitle
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        content:
          title: content
          description: content
          type: string
          format: '-'
          nullable: false
        sequence:
          title: sequence
          description: sequence
          type: integer
          format: '-'
          nullable: true
        sitepage_id:
          title: sitepage_id
          description: sitepage_id
          type: integer
          format: '-'
          nullable: true
        state:
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
          nullable: true
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: false
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: false
        created_by:
          title: created_by
          description: created_by
          type: integer
          format: '-'
          nullable: true
      type: object
    Sitesocials:
      title: Sitesocials
      description: Sitesocials
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        name:
          title: name
          description: name
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        link:
          title: link
          description: link
          type: string
          format: '-'
          maxLength: 255
          nullable: false
        path_icon:
          title: path_icon
          description: path_icon
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        state:
          title: state
          description: state
          type: string
          format: '-'
          maxLength: 20
          nullable: true
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: false
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: false
        created_by:
          title: created_by
          description: created_by
          type: integer
          format: '-'
          nullable: true
      type: object
    Users:
      title: Users
      description: Users
      properties:
        id:
          title: id
          description: id
          type: integer
          format: '-'
          nullable: false
        username:
          title: username
          description: username
          type: string
          format: '-'
          maxLength: 30
          nullable: true
        first_name:
          title: first_name
          description: first_name
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        last_name:
          title: last_name
          description: last_name
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        avatar:
          title: avatar
          description: avatar
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        status:
          title: status
          description: status
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        status_message:
          title: status_message
          description: status_message
          type: string
          format: '-'
          maxLength: 255
          nullable: true
        active:
          title: active
          description: active
          type: integer
          format: '-'
          maxLength: 1
          nullable: false
        permissions:
          title: permissions
          description: permissions
          type: string
          format: '-'
          nullable: true
        last_active:
          title: last_active
          description: last_active
          type: string
          format: date
          nullable: true
        created_at:
          title: created_at
          description: created_at
          type: string
          format: date
          nullable: true
        updated_at:
          title: updated_at
          description: updated_at
          type: string
          format: date
          nullable: true
        deleted_at:
          title: deleted_at
          description: deleted_at
          type: string
          format: date
          nullable: true
      type: object
    Wilayah:
      title: Wilayah
      description: Wilayah
      properties:
        kode:
          title: kode
          description: kode
          type: string
          format: '-'
          maxLength: 15
          nullable: false
        nama:
          title: nama
          description: nama
          type: string
          format: '-'
          maxLength: 70
          nullable: false
        level:
          title: level
          description: level
          type: string
          format: '-'
          nullable: false
      type: object
  requestBodies:
    Jabatan:
      description: 'Jabatan object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Jabatan'
        application/xml:
          schema:
            $ref: '#/components/schemas/Jabatan'
        application/json:
          schema:
            $ref: '#/components/schemas/Jabatan'
    Member:
      description: 'Member object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Member'
        application/xml:
          schema:
            $ref: '#/components/schemas/Member'
        application/json:
          schema:
            $ref: '#/components/schemas/Member'
    Pengurus:
      description: 'Pengurus object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Pengurus'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pengurus'
        application/json:
          schema:
            $ref: '#/components/schemas/Pengurus'
    Sitemenus:
      description: 'Sitemenus object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitemenus'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitemenus'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitemenus'
    Sitepages:
      description: 'Sitepages object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitepages'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitepages'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitepages'
    Siteposts:
      description: 'Siteposts object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Siteposts'
        application/xml:
          schema:
            $ref: '#/components/schemas/Siteposts'
        application/json:
          schema:
            $ref: '#/components/schemas/Siteposts'
    Sitesections:
      description: 'Sitesections object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitesections'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitesections'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitesections'
    Sitesocials:
      description: 'Sitesocials object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Sitesocials'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sitesocials'
        application/json:
          schema:
            $ref: '#/components/schemas/Sitesocials'
    Users:
      description: 'Users object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Users'
        application/xml:
          schema:
            $ref: '#/components/schemas/Users'
        application/json:
          schema:
            $ref: '#/components/schemas/Users'
    Wilayah:
      description: 'Wilayah object that needs to be added'
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Wilayah'
        application/xml:
          schema:
            $ref: '#/components/schemas/Wilayah'
        application/json:
          schema:
            $ref: '#/components/schemas/Wilayah'
  securitySchemes:
    bearer_auth:
      type: http
      description: 'Login with email and password to get the authentication token'
      name: 'Token based Based'
      in: header
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: Jabatan
    description: 'Everything about your Jabatan'
  -
    name: Member
    description: 'Everything about your Member'
  -
    name: Pengurus
    description: 'Everything about your Pengurus'
  -
    name: Sitemenus
    description: 'Everything about your Sitemenus'
  -
    name: Sitepages
    description: 'Everything about your Sitepages'
  -
    name: Siteposts
    description: 'Everything about your Siteposts'
  -
    name: Sitesections
    description: 'Everything about your Sitesections'
  -
    name: Sitesocials
    description: 'Everything about your Sitesocials'
  -
    name: Users
    description: 'Everything about your Users'
  -
    name: Wilayah
    description: 'Everything about your Wilayah'
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
